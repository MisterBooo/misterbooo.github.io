(window.webpackJsonp=window.webpackJsonp||[]).push([[193],{583:function(t,n,s){"use strict";s.r(n);var a=s(54),e=Object(a.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"leetcode-137、只出现一次的数字-ii"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-137、只出现一次的数字-ii"}},[t._v("#")]),t._v(" LeetCode 137、只出现一次的数字 II")]),t._v(" "),s("h2",{attrs:{id:"一、题目描述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、题目描述"}},[t._v("#")]),t._v(" "),s("strong",[t._v("一、题目描述")])]),t._v(" "),s("p",[t._v("给你一个整数数组 "),s("code",[t._v("nums")]),t._v(" ，除某个元素仅出现 "),s("strong",[t._v("一次")]),t._v(" 外，其余每个元素都恰出现 **三次 。**请你找出并返回那个只出现了一次的元素。")]),t._v(" "),s("p",[s("strong",[t._v("示例 1：")])]),t._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[t._v("输入：nums = [2,2,3,2]\n输出：3\n")])])]),s("p",[s("strong",[t._v("示例 2：")])]),t._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[t._v("输入：nums = [0,1,0,1,0,1,99]\n输出：99\n")])])]),s("p",[s("strong",[t._v("提示：")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("1 <= nums.length <= 3 * 104")])]),t._v(" "),s("li",[s("code",[t._v("-2^31 <= nums[i] <= 2^31 - 1")])]),t._v(" "),s("li",[s("code",[t._v("nums")]),t._v(" 中，除某个元素仅出现 "),s("strong",[t._v("一次")]),t._v(" 外，其余每个元素都恰出现 "),s("strong",[t._v("三次")])])]),t._v(" "),s("p",[t._v("**进阶：**你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？")]),t._v(" "),s("h2",{attrs:{id:"二、题目解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、题目解析"}},[t._v("#")]),t._v(" "),s("strong",[t._v("二、题目解析")])]),t._v(" "),s("h2",{attrs:{id:"三、参考代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、参考代码"}},[t._v("#")]),t._v(" "),s("strong",[t._v("三、参考代码")])]),t._v(" "),s("h3",{attrs:{id:"_1、java-代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、java-代码"}},[t._v("#")]),t._v(" "),s("strong",[t._v("1、Java 代码")])]),t._v(" "),s("div",{staticClass:"language-Java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 登录 AlgoMooc 官网获取更多算法图解")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// https://www.algomooc.com")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 作者：程序员吴师兄")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码有看不懂的地方一定要私聊咨询吴师兄呀")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只出现一次的数字 II（ LeetCode 137 ）:https://leetcode-cn.com/problems/single-number-ii")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("singleNumber")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置一个长度为 32 位的数组")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在这个数组中，每一位存储的就是 nums 数组中每一位二进制形式相加后 1 的个数")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" cnt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历 nums 数组")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 虽然这里有两个 for 循环，但是内层循环的 n 是常数，因此时间复杂度依旧为 O(n)")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            \n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取第 i 位的数字")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将 num 展开为二进制的形式，有 32 位")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n               \n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// >> 表示右移符号，右移运算是将一个二进制位的操作数按指定移动的位数向右移动，移出位被丢弃")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// >> j 表示右移了 j 位")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 比如 num 的二进制表示为 ")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0000 0000 0000 0000 0000 0000 0000 0010")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// >> 1 之后变成了")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 000 0000 0000 0000 0000 0000 0000 0001")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  在计算机中默认为 0 ，所以结果就是 0000 0000 0000 0000 0000 0000 0000 0001")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// & 表示按位与运算符，只有对应的两个二进位都为 1 时，结果位才为 1")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 每次将 num 向右移动之后，都将移动后的数和 1 进行按位与操作")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这样就得到了 num 中第 i 个二进制位")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 比如 num 的二进制表示为 ")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0000 0000 0000 0000 0000 0000 0000 0010")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当 j = 0 时，temp 为")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0000 0000 0000 0000 0000 0000 0000 001【0】 // temp 的二进制表示")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// &")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0000 0000 0000 0000 0000 0000 0000 000【1】 // 1 的二进制表示")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// =")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0000 0000 0000 0000 0000 0000 0000 000【0】 // 等于 0")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 即 num 的第 0 个位置的二进制位 0")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// < --------------\x3e")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当 j = 1 时，temp 为")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0000 0000 0000 0000 0000 0000 0000 000【1】 // temp 的二进制表示")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// &")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0000 0000 0000 0000 0000 0000 0000 000【1】 // 1 的二进制表示")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// =")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0000 0000 0000 0000 0000 0000 0000 000【1】 // 等于 1")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 即 num 的第 1 个位置的二进制位 1")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果第 j 位的二进制位是 1，把它累加到 cnt[j] 上")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// cnt[j] 表示 nums 数组中每一个数字二进制形式表示后，第 j 位有多少个 1")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    cnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 ans 用来记录 nums 中那个只出现了一次的元素")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一开始 ans 的二进制表示为 ")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0000 0000 0000 0000 0000 0000 0000 0000 ")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 即由 32 个 0 组成")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ans "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此时，cnt 已经存储的 nums 数组中每一位二进制形式相加后 1 的个数")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历每个位置")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            \n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为相同数字的二进制表示是一样的，也就意味着如果它出现了三次，那么这个数字相加三次之后，")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在某个位置上出现 1 的次数要么是 0 次，要么是 3 次")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 比如数字 2，它的二进制是  0000 0000 0000 0000 0000 0000 0000 00【1】0")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 出现三次时，【1】 也必然出现三次")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将某个位置相加的结果除以 3，如果余数为 1，表明只出现了一次")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把出现了一次的二进制位添加到 ans 上")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// << 表示左移符号，用来将一个数的各二进制位全部左移若干位")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 移动的位数由右操作数指定，右操作数必须是非负值，其右边空出的位用 0 填补，高位左移溢出则舍弃该高位")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个操作就是不断的填充二进制")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把二进制结果累加到 ans 上")]),t._v("\n                ans "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回 ans 就行")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ans"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"_2、-c-代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、-c-代码"}},[t._v("#")]),t._v(" **2、**"),s("strong",[t._v("C++")]),t._v(" "),s("strong",[t._v("代码")])]),t._v(" "),s("div",{staticClass:"language-C++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 登录 AlgoMooc 官网获取更多算法图解\n// https://www.algomooc.com\n// 作者：程序员吴师兄\n// 代码有看不懂的地方一定要私聊咨询吴师兄呀\n// 只出现一次的数字 II（ LeetCode 137 ）:https://leetcode-cn.com/problems/single-number-ii\nclass Solution {\npublic:\n    int singleNumber(vector<int>& nums) {\n\n        // 设置一个长度为 32 位的数组\n        // 在这个数组中，每一位存储的就是 nums 数组中每一位二进制形式相加后 1 的个数\n        vector<int> cnt(32, 0);\n\n        // 遍历 nums 数组\n        // 虽然这里有两个 for 循环，但是内层循环的 n 是常数，因此时间复杂度依旧为 O(n)\n        for (int i = 0 ; i < nums.size() ; i++ ) {\n            \n            // 获取第 i 位的数字\n            int num = nums[i];\n\n            // 将 num 展开为二进制的形式，有 32 位\n            for (int j = 0; j < 32; j++) {\n\n               \n                // >> 表示右移符号，右移运算是将一个二进制位的操作数按指定移动的位数向右移动，移出位被丢弃\n                // >> j 表示右移了 j 位\n                // 比如 num 的二进制表示为 \n                // 0000 0000 0000 0000 0000 0000 0000 0010\n                // >> 1 之后变成了\n                // 000 0000 0000 0000 0000 0000 0000 0001\n                //  在计算机中默认为 0 ，所以结果就是 0000 0000 0000 0000 0000 0000 0000 0001\n                int temp = num >> j;\n\n\n                // & 表示按位与运算符，只有对应的两个二进位都为 1 时，结果位才为 1\n                // 每次将 num 向右移动之后，都将移动后的数和 1 进行按位与操作\n                // 这样就得到了 num 中第 i 个二进制位\n                // 比如 num 的二进制表示为 \n                // 0000 0000 0000 0000 0000 0000 0000 0010\n                // 当 j = 0 时，temp 为\n                // 0000 0000 0000 0000 0000 0000 0000 001【0】 // temp 的二进制表示\n                // &\n                // 0000 0000 0000 0000 0000 0000 0000 000【1】 // 1 的二进制表示\n                // =\n                // 0000 0000 0000 0000 0000 0000 0000 000【0】 // 等于 0\n                // 即 num 的第 0 个位置的二进制位 0\n                // < --------------\x3e\n                // 当 j = 1 时，temp 为\n                // 0000 0000 0000 0000 0000 0000 0000 000【1】 // temp 的二进制表示\n                // &\n                // 0000 0000 0000 0000 0000 0000 0000 000【1】 // 1 的二进制表示\n                // =\n                // 0000 0000 0000 0000 0000 0000 0000 000【1】 // 等于 1\n                // 即 num 的第 1 个位置的二进制位 1\n                int x = temp & 1;\n\n                // 如果第 j 位的二进制位是 1，把它累加到 cnt[j] 上\n                // cnt[j] 表示 nums 数组中每一个数字二进制形式表示后，第 j 位有多少个 1\n                if ( x == 1) {\n                    cnt[j]++;\n                }\n            }\n\n        }\n\n        // 使用 ans 用来记录 nums 中那个只出现了一次的元素\n        // 一开始 ans 的二进制表示为 \n        // 0000 0000 0000 0000 0000 0000 0000 0000 \n        // 即由 32 个 0 组成\n        int ans = 0;\n        \n        // 此时，cnt 已经存储的 nums 数组中每一位二进制形式相加后 1 的个数\n        // 遍历每个位置\n        for (int i = 0; i < 32; i++) {\n            \n            // 因为相同数字的二进制表示是一样的，也就意味着如果它出现了三次，那么这个数字相加三次之后，\n            // 在某个位置上出现 1 的次数要么是 0 次，要么是 3 次\n            // 比如数字 2，它的二进制是  0000 0000 0000 0000 0000 0000 0000 00【1】0\n            // 出现三次时，【1】 也必然出现三次\n            // 将某个位置相加的结果除以 3，如果余数为 1，表明只出现了一次\n            int temp = cnt[i] % 3;\n\n            // 把出现了一次的二进制位添加到 ans 上\n            if (temp == 1) {\n\n                // << 表示左移符号，用来将一个数的各二进制位全部左移若干位\n                // 移动的位数由右操作数指定，右操作数必须是非负值，其右边空出的位用 0 填补，高位左移溢出则舍弃该高位\n                // 这个操作就是不断的填充二进制\n                int num = 1 << i;\n\n                // 把二进制结果累加到 ans 上\n                ans += num;\n            }\n        }\n\n        // 返回 ans 就行\n        return ans;\n    }\n};\n")])])]),s("h3",{attrs:{id:"_3、python-代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、python-代码"}},[t._v("#")]),t._v(" "),s("strong",[t._v("3、Python 代码")])]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#登录 AlgoMooc 官网获取更多算法图解")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# https://www.algomooc.com")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 作者：程序员吴师兄")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 代码有看不懂的地方一定要私聊咨询吴师兄呀")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只出现一次的数字 II（ LeetCode 137 ）:https://leetcode-cn.com/problems/single-number-ii")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("singleNumber")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" List"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置一个长度为 32 位的数组")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在这个数组中，每一位存储的就是 nums 数组中每一位二进制形式相加后 1 的个数")]),t._v("\n        cnt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 遍历 nums 数组")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 虽然这里有两个 for 循环，但是内层循环的 n 是常数，因此时间复杂度依旧为 O n)")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v("  i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n            \n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取第 i 位的数字")]),t._v("\n            num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将 num 展开为二进制的形式，有 32 位")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n\n               \n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# >> 表示右移符号，右移运算是将一个二进制位的操作数按指定移动的位数向右移动，移出位被丢弃")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# >> j 表示右移了 j 位")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 比如 num 的二进制表示为 ")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0000 0000 0000 0000 0000 0000 0000 0010")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# >> 1 之后变成了")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 000 0000 0000 0000 0000 0000 0000 0001")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  在计算机中默认为 0 ，所以结果就是 0000 0000 0000 0000 0000 0000 0000 0001")]),t._v("\n                temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" j\n\n\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# & 表示按位与运算符，只有对应的两个二进位都为 1 时，结果位才为 1")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 每次将 num 向右移动之后，都将移动后的数和 1 进行按位与操作")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这样就得到了 num 中第 i 个二进制位")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 比如 num 的二进制表示为 ")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0000 0000 0000 0000 0000 0000 0000 0010")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当 j = 0 时，temp 为")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0000 0000 0000 0000 0000 0000 0000 001【0】 # temp 的二进制表示")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# &")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0000 0000 0000 0000 0000 0000 0000 000【1】 # 1 的二进制表示")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# =")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0000 0000 0000 0000 0000 0000 0000 000【0】 # 等于 0")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 即 num 的第 0 个位置的二进制位 0")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# < --------------\x3e")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当 j = 1 时，temp 为")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0000 0000 0000 0000 0000 0000 0000 000【1】 # temp 的二进制表示")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# &")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0000 0000 0000 0000 0000 0000 0000 000【1】 # 1 的二进制表示")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# =")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0000 0000 0000 0000 0000 0000 0000 000【1】 # 等于 1")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 即 num 的第 1 个位置的二进制位 1")]),t._v("\n                x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果第 j 位的二进制位是 1，把它累加到 cnt[j] 上")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cnt[j] 表示 nums 数组中每一个数字二进制形式表示后，第 j 位有多少个 1")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v("   x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    cnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n                \n            \n\n        \n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用 ans 用来记录 nums 中那个只出现了一次的元素")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 一开始 ans 的二进制表示为 ")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0000 0000 0000 0000 0000 0000 0000 0000 ")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 即由 32 个 0 组成")]),t._v("\n        ans "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n        \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 此时，cnt 已经存储的 nums 数组中每一位二进制形式相加后 1 的个数")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 遍历每个位置")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v("  i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            \n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 因为相同数字的二进制表示是一样的，也就意味着如果它出现了三次，那么这个数字相加三次之后，")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在某个位置上出现 1 的次数要么是 0 次，要么是 3 次")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 比如数字 2，它的二进制是  0000 0000 0000 0000 0000 0000 0000 00【1】0")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 出现三次时，【1】 也必然出现三次")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将某个位置相加的结果除以 3，如果余数为 1，表明只出现了一次")]),t._v("\n            temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 把出现了一次的二进制位添加到 ans 上")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v("  temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# << 表示左移符号，用来将一个数的各二进制位全部左移若干位")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 移动的位数由右操作数指定，右操作数必须是非负值，其右边空出的位用 0 填补，高位左移溢出则舍弃该高位")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这个操作就是不断的填充二进制")]),t._v("\n                num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" i\n\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 把二进制结果累加到 ans 上")]),t._v("\n                ans "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" num\n            \n        \n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回 ans 就行 ")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在 Python 中需要对最高位进行特殊判断。")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ans "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" cnt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ans "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xffffffff")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])}),[],!1,null,null,null);n.default=e.exports}}]);