(window.webpackJsonp=window.webpackJsonp||[]).push([[160],{547:function(t,n,s){"use strict";s.r(n);var a=s(54),e=Object(a.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"leetcode-450、删除二叉搜索树中的节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-450、删除二叉搜索树中的节点"}},[t._v("#")]),t._v(" LeetCode 450、删除二叉搜索树中的节点")]),t._v(" "),s("h2",{attrs:{id:"一、题目描述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、题目描述"}},[t._v("#")]),t._v(" "),s("strong",[t._v("一、题目描述")])]),t._v(" "),s("p",[t._v("给定一个二叉搜索树的根节点 "),s("strong",[t._v("root")]),t._v(" 和一个值 "),s("strong",[t._v("key")]),t._v("，删除二叉搜索树中的 "),s("strong",[t._v("key")]),t._v(" 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。")]),t._v(" "),s("p",[t._v("一般来说，删除节点可分为两个步骤：")]),t._v(" "),s("p",[t._v("1、首先找到需要删除的节点；")]),t._v(" "),s("p",[t._v("2、如果找到了，删除它。")]),t._v(" "),s("h2",{attrs:{id:"二、题目解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、题目解析"}},[t._v("#")]),t._v(" "),s("strong",[t._v("二、题目解析")])]),t._v(" "),s("h2",{attrs:{id:"三、参考代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、参考代码"}},[t._v("#")]),t._v(" "),s("strong",[t._v("三、参考代码")])]),t._v(" "),s("h3",{attrs:{id:"_1、java-代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、java-代码"}},[t._v("#")]),t._v(" "),s("strong",[t._v("1、Java 代码")])]),t._v(" "),s("div",{staticClass:"language-Java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 登录 AlgoMooc 官网获取更多算法图解")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// https://www.algomooc.com")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 作者：程序员吴师兄")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码有看不懂的地方一定要私聊咨询吴师兄呀")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除二叉搜索树中的节点（ LeetCode 450 ）:https://leetcode-cn.com/problems/delete-node-in-a-bst/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("deleteNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1、如果 root 为空，那么直接返回空")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2、如果 root 的节点值等于需要删除的值，那么需要根据以下几种情况进行处理")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     \n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 情况 1：当前节点的左子树为空，那么当前节点 root 由 root 的右子树占位就行")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 比如 key 为 7")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       6")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     /   \\")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    2     7")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//           \\")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//            8")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 直接将以 8 作为根节点的二叉树挪到 7 的位置")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       6")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     /   \\")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    2     8")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 情况 2：当前节点的右子树为空，那么当前节点 root 由 root 的左子树占位就行")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 比如 key 为 2")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       6")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     /   \\")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    2     7")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   /        ")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  1          ")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 直接将以 1 作为根节点的二叉树挪到 2 的位置")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       6")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     /   \\")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    1     7")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 情况 3：被删除节点既有左子树，又有右子树")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 比如 key 为 2")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//          5")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       /     \\")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//      2       6")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    /   \\       \\")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   1     4       7")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//        /")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       3")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 需要找到右子树最小的值，或者左子树中最大的值")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里我们去找右子树最小的值，为 3")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),t._v(" minNodeOfRight "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("findMinNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 找到右子树最小的值之后，修改当前节点 root 的值为右子树最小的值")]),t._v("\n            root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" minNodeOfRight"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            \n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 同时，记得删除掉 root 的右子树最小的值之")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除操作就是以 root 作为根节点，key 为右子树最小的值进行删除")]),t._v("\n            root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("deleteNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" minNodeOfRight"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          \n          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3、如果 root 的节点值小于需要删除的值，那么就在 root 的右子树中去查找")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在 root 的右子树中去查找并删除 key ")]),t._v("\n            root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("deleteNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4、如果 root 的节点值大于需要删除的值，那么就在 root 的左子树中去查找")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在 root 的左子树中去查找并删除 key ")]),t._v("\n            root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("deleteNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最后返回需要已经删除了 key 的二叉树的根节点")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过 findMinNode ，可以找到二叉搜索树中最小的元素")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("findMinNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 由于二叉搜索树，左子树所有元素的值都小于根节点的值")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所以可以不断的查找，直到为叶子节点，那么就找到了")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不断的去查找当前节点的左子树")]),t._v("\n            node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回当前二叉搜索树中最小的元素")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"_2、-c-代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、-c-代码"}},[t._v("#")]),t._v(" **2、**"),s("strong",[t._v("C++")]),t._v(" "),s("strong",[t._v("代码")])]),t._v(" "),s("div",{staticClass:"language-C++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 登录 AlgoMooc 官网获取更多算法图解\n// https://www.algomooc.com\n// 作者：程序员吴师兄\n// 代码有看不懂的地方一定要私聊咨询吴师兄呀\n// 删除二叉搜索树中的节点（ LeetCode 450 ）:https://leetcode-cn.com/problems/delete-node-in-a-bst/\nclass Solution\n{\npublic:\n    TreeNode *deleteNode(TreeNode *root, int key)\n    {\n\n        // 1、如果 root 为空，那么直接返回空\n        if (root == NULL)\n            return NULL;\n\n        // 2、如果 root 的节点值等于需要删除的值，那么需要根据以下几种情况进行处理\n        if (root->val == key)\n        {\n\n            // 情况 1：当前节点的左子树为空，那么当前节点 root 由 root 的右子树占位就行\n            // 比如 key 为 7\n            //       6\n            //     /   \\\n            //    2     7\n            //           \\\n            //            8\n            // 直接将以 8 作为根节点的二叉树挪到 7 的位置\n            //       6\n            //     /   \\\n            //    2     8\n            if (root->left == NULL)\n                return root->right;\n\n            // 情况 2：当前节点的右子树为空，那么当前节点 root 由 root 的左子树占位就行\n            // 比如 key 为 2\n            //       6\n            //     /   \\\n            //    2     7\n            //   /\n            //  1\n            // 直接将以 1 作为根节点的二叉树挪到 2 的位置\n            //       6\n            //     /   \\\n            //    1     7\n            if (root->right == NULL)\n                return root->left;\n\n            // 情况 3：被删除节点既有左子树，又有右子树\n            // 比如 key 为 2\n            //          5\n            //       /     \\\n            //      2       6\n            //    /   \\       \\\n            //   1     4       7\n            //        /\n            //       3\n            // 需要找到右子树最小的值，或者左子树中最大的值\n            // 这里我们去找右子树最小的值，为 3\n            TreeNode *minNodeOfRight = findMinNode(root->right);\n\n            // 找到右子树最小的值之后，修改当前节点 root 的值为右子树最小的值\n            root->val = minNodeOfRight->val;\n\n            // 同时，记得删除掉 root 的右子树最小的值之\n            // 删除操作就是以 root 作为根节点，key 为右子树最小的值进行删除\n            root->right = deleteNode(root->right, minNodeOfRight->val);\n\n            // 3、如果 root 的节点值小于需要删除的值，那么就在 root 的右子树中去查找\n        }\n        else if (root->val < key)\n        {\n            // 在 root 的右子树中去查找并删除 key\n            root->right = deleteNode(root->right, key);\n\n            // 4、如果 root 的节点值大于需要删除的值，那么就在 root 的左子树中去查找\n        }\n        else if (root->val > key)\n        {\n            // 在 root 的左子树中去查找并删除 key\n            root->left = deleteNode(root->left, key);\n        }\n\n        // 最后返回需要已经删除了 key 的二叉树的根节点\n        return root;\n    }\n\n    // 通过 findMinNode ，可以找到二叉搜索树中最小的元素\n    TreeNode *findMinNode(TreeNode *node)\n    {\n\n        // 由于二叉搜索树，左子树所有元素的值都小于根节点的值\n        // 所以可以不断的查找，直到为叶子节点，那么就找到了\n        while (node->left != NULL)\n        {\n            // 不断的去查找当前节点的左子树\n            node = node->left;\n        }\n\n        // 返回当前二叉搜索树中最小的元素\n        return node;\n    }\n};\n")])])]),s("h3",{attrs:{id:"_3、python-代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、python-代码"}},[t._v("#")]),t._v(" "),s("strong",[t._v("3、Python 代码")])]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("登录 AlgoMooc 官网获取更多算法图解\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# https://www.algomooc.com")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 作者：程序员吴师兄")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 代码有看不懂的地方一定要私聊咨询吴师兄呀")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除二叉搜索树中的节点（ LeetCode 450 ）:https://leetcode-cn.com/problems/delete-node-in-a-bst/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("deleteNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Optional"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("TreeNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Optional"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("TreeNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1、如果 root 为空，那么直接返回空")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" root "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2、如果 root 的节点值等于需要删除的值，那么需要根据以下几种情况进行处理")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n     \n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 情况 1：当前节点的左子树为空，那么当前节点 root 由 root 的右子树占位就行")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 比如 key 为 7")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#       6")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     /   \\")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    2     7")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#           \\")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#            8")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 直接将以 8 作为根节点的二叉树挪到 7 的位置")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#       6")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     /   \\")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    2     8")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n               "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 情况 2：当前节点的右子树为空，那么当前节点 root 由 root 的左子树占位就行")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 比如 key 为 2")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#       6")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     /   \\")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    2     7")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   /        ")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  1          ")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 直接将以 1 作为根节点的二叉树挪到 2 的位置")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#       6")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     /   \\")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    1     7")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n               "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 情况 3：被删除节点既有左子树，又有右子树")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 比如 key 为 2")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#          5")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#       /     \\")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#      2       6")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    /   \\       \\")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   1     4       7")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#        /")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#       3")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 需要找到右子树最小的值，或者左子树中最大的值")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这里我们去找右子树最小的值，为 3")]),t._v("\n            minNodeOfRight "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("findMinNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 找到右子树最小的值之后，修改当前节点 root 的值为右子树最小的值")]),t._v("\n            root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" minNodeOfRight"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val\n            \n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 同时，记得删除掉 root 的右子树最小的值之")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除操作就是以 root 的右子树作为根节点，key 为右子树最小的值进行删除")]),t._v("\n            root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deleteNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("minNodeOfRight"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n          \n          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3、如果 root 的节点值小于需要删除的值，那么就在 root 的右子树中去查找")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在 root 的右子树中去查找并删除 key ")]),t._v("\n            root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deleteNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 4、如果 root 的节点值大于需要删除的值，那么就在 root 的左子树中去查找")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在 root 的左子树中去查找并删除 key ")]),t._v("\n            root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deleteNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        \n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 最后返回需要已经删除了 key 的二叉树的根节点")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root\n    \n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过 findMinNode ，可以找到二叉搜索树中最小的元素")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("findMinNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" node "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" TreeNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" TreeNode "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 由于二叉搜索树，左子树所有元素的值都小于根节点的值")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 所以可以不断的查找，直到为叶子节点，那么就找到了")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 不断的去查找当前节点的左子树")]),t._v("\n            node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left\n        \n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回当前二叉搜索树中最小的元素")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" node\n")])])])])}),[],!1,null,null,null);n.default=e.exports}}]);