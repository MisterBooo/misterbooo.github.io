(window.webpackJsonp=window.webpackJsonp||[]).push([[249],{639:function(t,s,n){"use strict";n.r(s);var a=n(54),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"剑指-offer-52-两个链表的第一个公共节点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#剑指-offer-52-两个链表的第一个公共节点"}},[t._v("#")]),t._v(" 剑指 Offer 52. 两个链表的第一个公共节点")]),t._v(" "),n("p",[t._v("大家好，我是吴师兄。")]),t._v(" "),n("p",[t._v("今天继续来学习《剑指Offer》系列的一道经典题目，依旧给出了非常详细的题解和精美的配图与动画。")]),t._v(" "),n("h2",{attrs:{id:"一、题目描述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、题目描述"}},[t._v("#")]),t._v(" 一、题目描述")]),t._v(" "),n("p",[t._v("编写一个程序，找到两个单链表相交的起始节点。")]),t._v(" "),n("h2",{attrs:{id:"二、题目解析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、题目解析"}},[t._v("#")]),t._v(" 二、题目解析")]),t._v(" "),n("p",[t._v("无论 A、B 两个链表是否有相交点，最终都会指向一个相同的节点，要么是它们的公共尾部，要么是 NULL。")]),t._v(" "),n("p",[t._v("让指针 "),n("code",[t._v("pointA")]),t._v(" 和 "),n("code",[t._v("pointB")]),t._v(" 分别指向链表 A 和链表 B 的头结点，之后两个指针分别以步幅为 1 的速度向链表的尾部遍历。")]),t._v(" "),n("ul",[n("li",[t._v("当指针 "),n("code",[t._v("pointA")]),t._v(" 遍历到链表 A 的尾节点时，此时指针 "),n("code",[t._v("pointA")]),t._v(" 走了 a 个节点，将指针 "),n("code",[t._v("pointA")]),t._v(" 指向链表 B 的头部，继续向后遍历，直至走到 "),n("code",[t._v("c1")]),t._v("，此时指针 "),n("code",[t._v("pointA")]),t._v(" 总共走了 "),n("code",[t._v("a + ( b - c )")]),t._v(" 步。")]),t._v(" "),n("li",[t._v("当指针 "),n("code",[t._v("pointB")]),t._v(" 遍历到链表 B 的尾节点时，此时指针 "),n("code",[t._v("pointB")]),t._v(" 走了 b 个节点，将指针 "),n("code",[t._v("pointB")]),t._v(" 指向链表 A 的头部，继续向后遍历，直至走到 "),n("code",[t._v("c1")]),t._v("，此时指针 "),n("code",[t._v("pointB")]),t._v(" 总共走了 "),n("code",[t._v("b + ( a - c )")]),t._v(" 步。")])]),t._v(" "),n("p",[t._v("根据数学知识，"),n("code",[t._v("a + ( b - c ) = b + ( a - c )")]),t._v(" ，如果 c > 0，表明两链表有公共尾部， "),n("code",[t._v("c1")]),t._v(" 存在，两两链表同时到达 "),n("code",[t._v("c1")]),t._v("；如果 c = 0，表明两链表没有公共尾部，指针 "),n("code",[t._v("pointA")]),t._v(" 和 "),n("code",[t._v("pointB")]),t._v(" 都指向 "),n("code",[t._v("NULL")]),t._v("。")]),t._v(" "),n("p",[t._v("为了帮助你更好的理解整个过程，我特意做了一组动画，"),n("strong",[t._v("点开可以查看")]),t._v("：")]),t._v(" "),n("video",{attrs:{id:"video",width:"700",height:"400",muted:"muted",controls:"controls",poster:"https://article-1257126549.cos.ap-guangzhou.myqcloud.com/blog/3hdi5.jpeg"},domProps:{muted:!0}},[n("source",{attrs:{src:"https://article-1257126549.cos.ap-guangzhou.myqcloud.com/MP4/%E5%89%91%E6%8C%87%20Offer%2052.%20%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9.m4v",type:"video/mp4"}})]),t._v(" "),n("h2",{attrs:{id:"三、参考代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、参考代码"}},[t._v("#")]),t._v(" 三、参考代码")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 登录 AlgoMooc 官网获取更多算法图解")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// https://www.algomooc.com")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 作者：程序员吴师兄")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码有看不懂的地方一定要私聊咨询吴师兄呀")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getIntersectionNode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" headA"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" headB"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 边界判断")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("headA "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" headB "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置一个指针 pointA，指向链表 A 的头节点")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" pointA "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" headA"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置一个指针 pointB，指向链表 B 的头节点")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" pointB "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" headB"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指针 pointA 和 指针 pointB 不断向后遍历，直到找到相交点")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不用担心会跳不出这个循环，实际上在链表 headA 长度和链表 headB 长度的之和减一")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// pointA 和 pointB 都会同时指向 null")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 比如 headA 的长度是 7，headB 的长度是 11，这两个链表不相交")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 那么 pointA 移动了 7 + 11 - 1 次之后，会指向 null")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// pointB 移动了 7 + 11 - 1  次之后，也指向 null")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个时候就跳出了循环")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pointA "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" pointB"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指针 pointA 一开始在链表 A 上遍历，当走到链表 A 的尾部即 null 时，跳转到链表 B 上 ")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" pointA "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指针 pointA 跳转到链表 B 上  ")]),t._v("\n                pointA "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" headB"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 否则的话 pointA 不断的向后移动")]),t._v("\n                pointA "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pointA"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n             "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指针 pointB 一开始在链表 B 上遍历，当走到链表 B 的尾部即 null 时，跳转到链表 A 上 ")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" pointB "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指针 pointA 跳转到链表 B 上  ")]),t._v("\n                pointB "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" headA"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 否则的话 pointB 不断的向后移动")]),t._v("\n                pointB "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pointB"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1、此时，pointA 和 pointB 指向那个相交的节点，返回任意一个均可")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2、此时，headA 和 headB 不相交，那么 pointA 和 pointB 均为 null，也返回任意一个均可")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" pointA"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);