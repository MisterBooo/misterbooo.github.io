(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{492:function(n,t,s){"use strict";s.r(t);var a=s(54),e=Object(a.a)({},(function(){var n=this,t=n.$createElement,s=n._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"leetcode-349、两个数组的交集"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-349、两个数组的交集"}},[n._v("#")]),n._v(" LeetCode 349、两个数组的交集")]),n._v(" "),s("h1",{attrs:{id:"一、题目描述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、题目描述"}},[n._v("#")]),n._v(" "),s("strong",[n._v("一、题目描述")])]),n._v(" "),s("p",[n._v("给定两个数组 "),s("code",[n._v("nums1")]),n._v(" 和 "),s("code",[n._v("nums2")]),n._v(" ，返回 "),s("em",[n._v("它们的交集")]),n._v(" 。输出结果中的每个元素一定是 "),s("strong",[n._v("唯一")]),n._v(" 的。我们可以 "),s("strong",[n._v("不考虑输出结果的顺序")]),n._v(" 。")]),n._v(" "),s("p",[s("strong",[n._v("示例 1：")])]),n._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[n._v("输入：nums1 = [1,2,2,1], nums2 = [2,2]\n输出：[2]\n")])])]),s("p",[s("strong",[n._v("示例 2：")])]),n._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[n._v("输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n输出：[9,4]\n解释：[4,9] 也是可通过的\n")])])]),s("p",[s("strong",[n._v("提示：")])]),n._v(" "),s("ul",[s("li",[s("code",[n._v("1 <= nums1.length, nums2.length <= 1000")])]),n._v(" "),s("li",[s("code",[n._v("0 <= nums1[i], nums2[i] <= 1000")])])]),n._v(" "),s("h1",{attrs:{id:"二、题目解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、题目解析"}},[n._v("#")]),n._v(" "),s("strong",[n._v("二、题目解析")])]),n._v(" "),s("h1",{attrs:{id:"三、参考代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、参考代码"}},[n._v("#")]),n._v(" "),s("strong",[n._v("三、参考代码")])]),n._v(" "),s("h2",{attrs:{id:"方法一"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法一"}},[n._v("#")]),n._v(" 方法一")]),n._v(" "),s("p",[n._v("哈希集合"),s("strong",[n._v("调"),s("strong",[s("strong",[n._v("API")])]),n._v("解法")])]),n._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 题目：LC349. 两个数组的交集")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 难度：简单")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 作者：闭着眼睛学数理化")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 算法：哈希集合调API")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 代码看不懂的地方，请直接在群上提问")]),n._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("class")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Solution")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("def")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("intersection")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" nums1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v(" List"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" nums2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v(" List"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v(">")]),n._v(" List"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("return")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("list")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("nums1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("&")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("nums2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 先将两个数组nums1和nums2用set(nums1)和set(nums2)转化为哈希集合")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 再使用两个集合的取交集操作&，得到set(nums1)和set(nums2)的交集")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 由于题目要求返回一个列表，我们还需要把交集再转化为list()，即可返回")]),n._v("\n")])])]),s("p",[n._v("哈希集合"),s("strong",[n._v("遍历解法")])]),n._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("class")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Solution")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("def")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("intersection")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" nums1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v(" List"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" nums2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v(" List"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v(">")]),n._v(" List"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 先获得nums1对应的哈希集合")]),n._v("\n        nums1_set "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("nums1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 构建一个答案集合，初始化为空")]),n._v("\n        ans_set "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n        \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 遍历nums2中的元素num")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("for")]),n._v(" num "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("in")]),n._v(" nums2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 如果num位于nums1对应的哈希集合nums1_set中")]),n._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" num "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("in")]),n._v(" nums1_set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 则说明num同时位于nums1和nums2中")]),n._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 将其加入ans_set")]),n._v("\n                ans_set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("add"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n                \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 最后将ans_set转化为列表后返回")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("return")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("list")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("ans_set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("  \n")])])]),s("h3",{attrs:{id:"时空复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#时空复杂度"}},[n._v("#")]),n._v(" "),s("strong",[n._v("时空复杂度")])]),n._v(" "),s("p",[n._v("时间复杂度："),s("code",[n._v("O(m+n)")]),n._v("。"),s("code",[n._v("nums1")]),n._v("和"),s("code",[n._v("nums2")]),n._v("各自需要遍历一次。")]),n._v(" "),s("p",[n._v("空间复杂度："),s("code",[n._v("O(m+n)")]),n._v("。两个哈希集合所占用的空间。")]),n._v(" "),s("h2",{attrs:{id:"方法二"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法二"}},[n._v("#")]),n._v(" 方法二*")]),n._v(" "),s("p",[n._v("排序+双指针解法（暂不要求掌握）")]),n._v(" "),s("ol",[s("li",[s("h3",{attrs:{id:"java-代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-代码"}},[n._v("#")]),n._v(" "),s("strong",[n._v("Java 代码")])])])]),n._v(" "),s("div",{staticClass:"language-Java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 登录 AlgoMooc 官网获取更多算法图解")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// https://www.algomooc.com")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 作者：程序员吴师兄")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 代码有看不懂的地方一定要私聊咨询吴师兄呀")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// https://leetcode-cn.com/problems/intersection-of-two-arrays/")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("class")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Solution")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("public")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("intersection")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v(" nums1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v(" nums2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 首先对两个数组进行排序")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("sort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("nums1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("sort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("nums2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 计算出两个数组的长度")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("int")]),n._v(" length1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" nums1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("length "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v(" \n        \n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("int")]),n._v(" length2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" nums2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 两个数组的交集结果数组长度必然是小于等于最短数组的长度")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v(" res "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("length1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v(">")]),n._v(" length2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("?")]),n._v(" length2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v(":")]),n._v(" length1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 设置三个索引指针")]),n._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// index 指向结果数组 res ，每当 index 指向的位置填充了元素就向后移动")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("int")]),n._v(" index "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n        \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// index1 指向数组 nums1 中的元素，将该元素和 index2 指向数组 nums2 中的元素进行比较")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("int")]),n._v(" index1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n        \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// index2 指向数组 nums2 中的元素，将该元素和 index1 指向数组 nums1 中的元素进行比较")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("int")]),n._v(" index2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 移动 index1 和 index2 ")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("while")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("index1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<")]),n._v(" length1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("&&")]),n._v(" index2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<")]),n._v(" length2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            \n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 获取 index1 指向的元素值")]),n._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("int")]),n._v(" num1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" nums1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("index1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n            \n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 获取 index2 指向的元素值")]),n._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("int")]),n._v(" num2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" nums2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("index2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// num1 和 num2 的大小关系有三种")]),n._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 1、num1 == num2")]),n._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("num1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("==")]),n._v(" num2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 由于输出结果中的每个元素一定是 【唯一】 的，所以要做一下判断")]),n._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 如果 res 中的 index 在起始位置，说明还没有存放元素")]),n._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 那么这个相等的元素可以存放到 res 中")]),n._v("\n\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 如果 res 中的 index 不在起始位置")]),n._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 当它前面存放的元素并不是现在想要存放的元素")]),n._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 那么这个相等的元素可以存放到 res 中")]),n._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("index "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("==")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("||")]),n._v(" num1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("!=")]),n._v(" res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("index "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\n                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 存放到 res 中")]),n._v("\n                    res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" num1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 移动 index")]),n._v("\n                    index"),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 移动 index1 ，比较其它元素")]),n._v("\n                index1"),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 移动 index2 ，比较其它元素")]),n._v("\n                index2"),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 2、num1 < num2")]),n._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("else")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("num1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<")]),n._v(" num2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n                \n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 由于两个数组已经排序了，说明此时 num1 肯定会小于 nums2 数组中 num2 后面所有的数")]),n._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 那 num1 肯定是无法在 nums2 中找到相等的元素")]),n._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 移动 index1 ，比较其它元素")]),n._v("\n                index1"),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 3、num1 > num2")]),n._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("else")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 由于两个数组已经排序了，说明此时 num2 肯定会小于 nums1 数组中 num1 后面所有的数")]),n._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 那 num2 肯定是无法在 nums1 中找到相等的元素")]),n._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 移动 index2 ，比较其它元素")]),n._v("\n                index2"),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 最后返回结果数组中有值的那些元素就行")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("return")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("copyOfRange")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])])]),s("ol",[s("li",[s("h3",{attrs:{id:"c-代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#c-代码"}},[n._v("#")]),n._v(" "),s("strong",[n._v("C++")]),n._v(" "),s("strong",[n._v("代码")])])])]),n._v(" "),s("div",{staticClass:"language-C++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\npublic:\n    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {\n\n        // 首先对两个数组进行排序\n        sort(nums1.begin(), nums1.end());\n\n        sort(nums2.begin(), nums2.end());\n       \n\n        // 计算出两个数组的长度\n        int length1 = nums1.size();\n\n        int length2 = nums2.size();\n        \n    \n        // 两个数组的交集结果数组长度必然是小于等于最短数组的长度\n        vector<int> res ;\n\n        // 设置三个索引指针\n\n        // index 指向结果数组 res ，每当 index 指向的位置填充了元素就向后移动\n        // int index = 0;\n        \n        // index1 指向数组 nums1 中的元素，将该元素和 index2 指向数组 nums2 中的元素进行比较\n        int index1 = 0;\n        \n        // index2 指向数组 nums2 中的元素，将该元素和 index1 指向数组 nums1 中的元素进行比较\n        int index2 = 0;\n\n        // 移动 index1 和 index2 \n        while (index1 < length1 && index2 < length2) {\n            \n            // 获取 index1 指向的元素值\n            int num1 = nums1[index1];\n            \n            // 获取 index2 指向的元素值\n            int num2 = nums2[index2];\n\n            // num1 和 num2 的大小关系有三种\n\n            // 1、num1 == num2\n            if (num1 == num2) {\n\n                // 由于输出结果中的每个元素一定是 【唯一】 的，所以要做一下判断\n                // 如果 res 中的 index 在起始位置，说明还没有存放元素\n                // 那么这个相等的元素可以存放到 res 中\n\n                // 如果 res 中的 index 不在起始位置\n                // 当它前面存放的元素并不是现在想要存放的元素\n                // 那么这个相等的元素可以存放到 res 中\n                if ( !res.size() || num1 != res.back()) {\n\n                    // 存放到 res 中\n                    res.push_back(num1);\n                   \n                }\n\n                // 移动 index1 ，比较其它元素\n                index1++;\n               \n                // 移动 index2 ，比较其它元素\n                index2++;\n\n            // 2、num1 < num2\n            } else if (num1 < num2) {\n                \n                // 由于两个数组已经排序了，说明此时 num1 肯定会小于 nums2 数组中 num2 后面所有的数\n                // 那 num1 肯定是无法在 nums2 中找到相等的元素\n                // 移动 index1 ，比较其它元素\n                index1++;\n\n            // 3、num1 > num2\n            } else {\n\n                // 由于两个数组已经排序了，说明此时 num2 肯定会小于 nums1 数组中 num1 后面所有的数\n                // 那 num2 肯定是无法在 nums1 中找到相等的元素\n                // 移动 index2 ，比较其它元素\n                index2++;\n\n            }\n        }\n\n        // 最后返回结果数组中有值的那些元素就行\n        return res;\n\n    }\n};\n")])])]),s("ol",[s("li",[s("h3",{attrs:{id:"python-代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#python-代码"}},[n._v("#")]),n._v(" "),s("strong",[n._v("Python 代码")])])])]),n._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("class")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Solution")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("def")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("intersection")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" nums1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v(" List"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" nums2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v(" List"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v(">")]),n._v(" List"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 首先对两个数组进行排序")]),n._v("\n        nums1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("sort"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n\n        nums2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("sort"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 计算出两个数组的长度")]),n._v("\n        length1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("nums1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n        \n        length2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("nums2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 两个数组的交集结果数组长度必然是小于等于最短数组的长度")]),n._v("\n        res "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("list")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 设置三个索引指针")]),n._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# index 指向结果数组 res ，每当 index 指向的位置填充了元素就向后移动")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# index = 0")]),n._v("\n        \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# index1 指向数组 nums1 中的元素，将该元素和 index2 指向数组 nums2 中的元素进行比较")]),n._v("\n        index1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),n._v("\n        \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# index2 指向数组 nums2 中的元素，将该元素和 index1 指向数组 nums1 中的元素进行比较")]),n._v("\n        index2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),n._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 移动 index1 和 index2 ")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("while")]),n._v(" index1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<")]),n._v(" length1 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("and")]),n._v(" index2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<")]),n._v(" length2 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v("\n            \n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 获取 index1 指向的元素值")]),n._v("\n            num1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" nums1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("index1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v("\n            \n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 获取 index2 指向的元素值")]),n._v("\n            num2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" nums2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("index2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# num1 和 num2 的大小关系有三种")]),n._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 1、num1 == num2")]),n._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" num1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("==")]),n._v(" num2 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v("\n\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 由于输出结果中的每个元素一定是 【唯一】 的，所以要做一下判断")]),n._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 如果 res 中的 index 在起始位置，说明还没有存放元素")]),n._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 那么这个相等的元素可以存放到 res 中")]),n._v("\n\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 如果 res 中的 index 不在起始位置")]),n._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 当它前面存放的元素并不是现在想要存放的元素")]),n._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 那么这个相等的元素可以存放到 res 中")]),n._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("not")]),n._v(" res "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("or")]),n._v(" num1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("!=")]),n._v(" res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v("\n                    res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("append"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("num1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 移动 index1 ，比较其它元素")]),n._v("\n                index1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("+=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 移动 index2 ，比较其它元素")]),n._v("\n                index2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("+=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 2、num1 < num2")]),n._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("elif")]),n._v(" num1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<")]),n._v(" num2 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v("\n                \n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 由于两个数组已经排序了，说明此时 num1 肯定会小于 nums2 数组中 num2 后面所有的数")]),n._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 那 num1 肯定是无法在 nums2 中找到相等的元素")]),n._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 移动 index1 ，比较其它元素")]),n._v("\n                index1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("+=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 3、num1 > num2")]),n._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v("\n\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 由于两个数组已经排序了，说明此时 num2 肯定会小于 nums1 数组中 num1 后面所有的数")]),n._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 那 num2 肯定是无法在 nums1 中找到相等的元素")]),n._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 移动 index2 ，比较其它元素")]),n._v("\n                index2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("+=")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 最后返回结果数组中有值的那些元素就行")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("return")]),n._v(" res\n")])])]),s("h3",{attrs:{id:"时空复杂度-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#时空复杂度-2"}},[n._v("#")]),n._v(" "),s("strong",[n._v("时空复杂度")])]),n._v(" "),s("p",[n._v("时间复杂度："),s("code",[n._v("O(mlogm+nlogn)")]),n._v("。两数组快排时间复杂度分别是"),s("code",[n._v("O(mlogm)")]),n._v("、"),s("code",[n._v("O(nlogn)")]),n._v("，双指针遍历需要"),s("code",[n._v("O(m+n)")]),n._v("，复杂度取决于较大的"),s("code",[n._v("O(mlogm+nlogn)")]),n._v("。")]),n._v(" "),s("p",[n._v("空间复杂度："),s("code",[n._v("O(logm+logn)")]),n._v("。排序使用的额外空间。")])])}),[],!1,null,null,null);t.default=e.exports}}]);