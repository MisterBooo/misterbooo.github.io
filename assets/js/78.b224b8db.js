(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{466:function(s,t,n){"use strict";n.r(t);var a=n(54),e=Object(a.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"leetcode-142、环形链表ii"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-142、环形链表ii"}},[s._v("#")]),s._v(" LeetCode 142、环形链表II")]),s._v(" "),n("h2",{attrs:{id:"一、题目描述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、题目描述"}},[s._v("#")]),s._v(" "),n("strong",[s._v("一、题目描述")])]),s._v(" "),n("p",[s._v("给定一个链表，"),n("strong",[s._v("返回链表开始入环的第一个节点")]),s._v("。")]),s._v(" "),n("p",[s._v("如果链表无环，则返回 null。为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。")]),s._v(" "),n("p",[s._v("如果 pos 是 -1，则在该链表中没有环。")]),s._v(" "),n("p",[s._v("注意，pos 仅仅是用于标识环的情况，并不会作为参数传递到函数中。")]),s._v(" "),n("p",[s._v("说明：不允许修改给定的链表。")]),s._v(" "),n("h2",{attrs:{id:"二、题目解析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、题目解析"}},[s._v("#")]),s._v(" "),n("strong",[s._v("二、题目解析")])]),s._v(" "),n("p",[s._v("1、通过快慢指针的方式，在环中寻找它们的第一次相遇的节点位置")]),s._v(" "),n("p",[s._v("2、当快慢指针相遇的时候：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://superblog-1257126549.cos.ap-guangzhou.myqcloud.com/202306101158733.(null)",alt:"img"}})]),s._v(" "),n("p",[s._v("x 代表从头节点到环形入口节点的节点数（不包含头节点）")]),s._v(" "),n("p",[s._v("y 代表从环形入口到第一次相遇节点的节点数（不包含环形入口节点）")]),s._v(" "),n("p",[s._v("z 代表从第一次相遇节点到环形入口的节点数（不包含第一次相遇节点）")]),s._v(" "),n("p",[s._v("此时，快指针走了 x + y + n (y + z)，其中，x + y 表示快指针第一次到达相遇节点，n 代表快指针在环里面绕了多少圈。")]),s._v(" "),n("p",[s._v("而慢指针走了 x + y 步。")]),s._v(" "),n("p",[s._v("那么就出现了一个等式 "),n("code",[s._v("x + y = [x + y + n (y + z)] / 2")]),s._v("，即"),n("code",[s._v("x = n（y + z）- y")]),s._v("。")]),s._v(" "),n("p",[n("strong",[s._v("n（y + z）- y")]),s._v(" 代表的含义是"),n("strong",[s._v("一个指针从相遇节点开始出发，走了 n 圈之后回到原来的出发位置，往后退 y 步")]),s._v("。")]),s._v(" "),n("p",[s._v("由于 x 代表从头节点到环形入口节点的节点数，并且"),n("code",[s._v("x = n（y + z）- y")]),s._v("，所以"),n("strong",[s._v("n（y + z）- y")]),s._v(" 代表的含义就是"),n("strong",[s._v("一个指针从相遇节点开始出发，走了 n 圈之后回到原来的出发位置，往后退 y 步来到了环的入口位置")]),s._v("。")]),s._v(" "),n("p",[s._v("那么，我们就可以设置两个指针，一个从链表的头节点开始出发，一个指针从相遇节点开始出发，当它们相遇的时候，代表着环的入口节点找到了。")]),s._v(" "),n("p",[s._v("补充：")]),s._v(" "),n("ul",[n("li",[s._v("1、当 slow = 1 ， fast = 2 ，为什么 fast 和 slow 一定会相遇？")]),s._v(" "),n("li",[s._v("2、当 slow = 1 ， fast = 2 ，fast 和 slow 相遇时，slow 指针是否绕环超过一圈？")]),s._v(" "),n("li",[s._v("3、slow 和 fast 的移动步数有什么规则？")]),s._v(" "),n("li",[s._v("4、能否设置为 slow 每次移动 1 步，fast 每次移动  3、4、5...步？")]),s._v(" "),n("li",[s._v("5、为什么设置 slow = 1 ， fast = 2 ？")]),s._v(" "),n("li",[s._v("6、为什么得出相反的结论？")])]),s._v(" "),n("p",[n("strong",[s._v("为了方便大家理解与表达，所以回答尽可能的采取口语化的表达方式，面试的时候你直接拿去用就行。")])]),s._v(" "),n("h2",{attrs:{id:"_1、当-slow-1-fast-2-为什么-fast-和-slow-一定会相遇"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、当-slow-1-fast-2-为什么-fast-和-slow-一定会相遇"}},[s._v("#")]),s._v(" "),n("strong",[s._v("1、当 slow = 1 ， fast = 2 ，为什么 fast 和 slow 一定会相遇？")])]),s._v(" "),n("p",[s._v("首先，我们从现实角度去思考。")]),s._v(" "),n("p",[s._v("一个 400 米的圆形跑道上，有跑的慢的人、有跑的快的人，只要给予一定的时间，快的肯定会追上慢的，触发相遇。")]),s._v(" "),n("p",[s._v("环形链表在这个的基础上增加了一条限制："),n("strong",[s._v("跑道并非连续，而是有一个个的节点组成的")]),s._v("。")]),s._v(" "),n("p",[s._v("需要注意，如果两者没有在节点相遇，而是在节点与节点之间的位置相遇，"),n("strong",[s._v("那并非相遇只是相交")]),s._v("。")]),s._v(" "),n("p",[s._v("1、假设，fast 在 slow 后方"),n("strong",[s._v("一个节点")]),s._v("的位置，那么它们都跳一次之后，fast 和 slow 相遇了。")]),s._v(" "),n("p",[s._v("2、假设，fast 在 slow 后方"),n("strong",[s._v("两个节点")]),s._v("的位置，那么它们都跳一次之后，fast 和 slow 的距离缩短为 1，变成了上述假设 1 的问题，可以相遇。")]),s._v(" "),n("p",[s._v("3、假设，fast 在 slow 后方 "),n("strong",[s._v("N 个节点")]),s._v("的位置，那么它们都跳一次之后，fast 和 slow 的距离缩短为 N - 1，每条一次，都可以缩短一个单位，不断缩短，最终变成上述的假设 1。")]),s._v(" "),n("p",[s._v("所以，"),n("strong",[s._v("fast 和 slow 一定会相遇")]),s._v("。")]),s._v(" "),n("h2",{attrs:{id:"_2、当-slow-1-fast-2-fast-和-slow-相遇时-slow-指针是否绕环超过一圈"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、当-slow-1-fast-2-fast-和-slow-相遇时-slow-指针是否绕环超过一圈"}},[s._v("#")]),s._v(" "),n("strong",[s._v("2、当 slow = 1 ， fast = 2 ，fast 和 slow 相遇时，slow 指针是否绕环超过一圈？")])]),s._v(" "),n("p",[s._v("从 slow 进入环之后开始统计，fast 与 slow 相距最远的距离是 fast 在 slow 前方一个节点的位置。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://superblog-1257126549.cos.ap-guangzhou.myqcloud.com/202306101158204.(null)",alt:"img"}})]),s._v(" "),n("p",[s._v("此时，假设一下，fast 与 slow 同时在节点 2 开始出发，相当于两者相距一个环的距离。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://superblog-1257126549.cos.ap-guangzhou.myqcloud.com/202306101158856.(null)",alt:"img"}})]),s._v(" "),n("p",[s._v("当 slow 跑完一圈来到起始位置节点 2 时，由于 fast 速度是 slow 的两倍，那么 fast 必然跑了两圈也来到起始位置节点 2 ，两者相遇。")]),s._v(" "),n("p",[s._v("而此时，fast 在 slow 的前方位置，意味着两者的距离是小于一个完整的环的节点数的，说明 fast 可以更快的追上 slow。")]),s._v(" "),n("p",[s._v("既然 fast 与 slow 相距一个环的距离相遇时，slow 才能跑一圈，那么相距更短的距离，slow 没有跑完一圈，两者相遇了。")]),s._v(" "),n("h2",{attrs:{id:"_3、slow-和-fast-的移动步数有什么规则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、slow-和-fast-的移动步数有什么规则"}},[s._v("#")]),s._v(" "),n("strong",[s._v("3、slow 和 fast 的移动步数有什么规则？")])]),s._v(" "),n("p",[s._v("只需要两者的步数不一致就行。")]),s._v(" "),n("h2",{attrs:{id:"_4、能否设置为-slow-每次移动-1-步-fast-每次移动-3、4、5-步"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4、能否设置为-slow-每次移动-1-步-fast-每次移动-3、4、5-步"}},[s._v("#")]),s._v(" "),n("strong",[s._v("4、能否设置为 slow 每次移动 1 步，fast 每次移动  3、4、5...步？")])]),s._v(" "),n("p",[s._v("先说答案："),n("strong",[s._v("可以")]),s._v("！")]),s._v(" "),n("p",[s._v("首先，只要快慢两个指针都进入环中，两者有速度差，快指针就一定能够追上慢指针。")]),s._v(" "),n("p",[s._v("追上可以分为两种情况：")]),s._v(" "),n("p",[s._v("1、恰好追上，即快慢指针在某个位置相遇了 2、快指针超过了慢指针，快指针跑到了慢指针的前面了")]),s._v(" "),n("p",[s._v("所以，我们需要分析的就是第二种情况："),n("strong",[s._v("跑到前面之后能否多跑几圈之后刚好相遇")]),s._v("。")]),s._v(" "),n("p",[s._v("假设环的周长为整数 L，slow 每次走 a 步，fast 每次走 b 步，a ≠ b。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://superblog-1257126549.cos.ap-guangzhou.myqcloud.com/202306101158314.(null)",alt:"img"}})]),s._v(" "),n("p",[s._v("相遇时，两者都走了 t 次。")]),s._v(" "),n("p",[s._v("1、slow 走过的路程：x + y + n(y+z), n 代表 slow 绕了 n 圈 2、fast 走过的路程：x + y + m(y+z)，m 代表 fast饶了 m 圈 3、m > n")]),s._v(" "),n("p",[s._v("对于 slow ：x + y + n(y+z) = a * t")]),s._v(" "),n("p",[s._v("对于 fast ：x + y + m(y+z) = b * t")]),s._v(" "),n("p",[s._v("两者一相减：")]),s._v(" "),n("blockquote",[n("p",[n("strong",[s._v("“")])]),s._v(" "),n("p",[s._v("(m - n)( y + z ) = ( b - a ) * t")]),s._v(" "),n("p",[n("strong",[s._v("”")])])]),s._v(" "),n("p",[s._v("y + z 代表一圈的节点数，y + z = L")]),s._v(" "),n("blockquote",[n("p",[n("strong",[s._v("“")])]),s._v(" "),n("p",[s._v("(m - n)L = ( b - a ) * t")]),s._v(" "),n("p",[n("strong",[s._v("”")])])]),s._v(" "),n("p",[s._v("b - a 为一个正整数，假设为 c 。")]),s._v(" "),n("p",[s._v("**t =  (**"),n("strong",[s._v("m")]),s._v(" "),n("strong",[s._v("- n)L /  c")]),s._v("。")]),s._v(" "),n("p",[s._v("其中 L 为常量，m 与 n 都可以随便设置，因此 m - n 的值可以为 1、2、3、。。。，")]),s._v(" "),n("p",[n("strong",[s._v("无论 c 取任何的正整数值，始终可以找到")]),s._v(" "),n("strong",[s._v("m")]),s._v(" "),n("strong",[s._v("与 n，计算得到一个正整数 t 。")])]),s._v(" "),n("p",[s._v("也就是说  c 可以为 1、2、3、4、5。。。")]),s._v(" "),n("p",[s._v("说明 slow 与 fast 的速度差可以为  1、2、3、4、5。。。")]),s._v(" "),n("p",[s._v("由此也证明了 slow 每次走 1 步，fast 每次走 2 步、3 步、4 步。。。都是可以相遇的。")]),s._v(" "),n("p",[s._v("甚至，slow 每次走 2 步，fast 每次 3 步、4 步。。。都是可以相遇的。")]),s._v(" "),n("p",[s._v("只要 a ≠ b，存在步数差。")]),s._v(" "),n("h2",{attrs:{id:"_5、为什么设置-slow-1-fast-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5、为什么设置-slow-1-fast-2"}},[s._v("#")]),s._v(" "),n("strong",[s._v("5、为什么设置 slow = 1 ， fast = 2 ？")])]),s._v(" "),n("p",[s._v("由于 **b - a =  (**"),n("strong",[s._v("m")]),s._v(" "),n("strong",[s._v("- n)L /  t")]),s._v("。")]),s._v(" "),n("p",[s._v("说明速度差 b - a 越小，fast 和 slow 跑的圈数就越小，经历的节点数也就越少，")]),s._v(" "),n("p",[s._v("由此 "),n("strong",[s._v("b – a = 1")]),s._v(" 是一个最小的答案，"),n("strong",[s._v("即 fast 和 slow 相差一步最合理")]),s._v("。")]),s._v(" "),n("p",[s._v("然后，再来看，slow 进环的时候，fast 已经在环里面了，当 slow 来到环入口的时候，代表 fast 已经快跑了一圈。")]),s._v(" "),n("p",[s._v("所以，fast 和 slow 相遇，m 至少为 1。")]),s._v(" "),n("p",[s._v("m 越小，fast 总共走的路程就越小，时间复杂度就越低。")]),s._v(" "),n("p",[s._v("所以，m = 1 时最低的时间复杂度。")]),s._v(" "),n("p",[s._v("所以，fast 跑的越慢，越能在环中少跑几圈等到还在外面直线跑的 slow。")]),s._v(" "),n("p",[s._v("由于 a ≠ b， b – a = 1 ，a = 1，所以 b = 2。")]),s._v(" "),n("p",[s._v("所以，设置 slow 为 1 ，fast 为 2 最合理！")]),s._v(" "),n("h2",{attrs:{id:"_6、为什么得出相反的结论"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6、为什么得出相反的结论"}},[s._v("#")]),s._v(" "),n("strong",[s._v("6、为什么得出相反的结论？")])]),s._v(" "),n("p",[s._v("关于 fast 与 slow 能否相遇的问题，我在网上看到这样的回答。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://superblog-1257126549.cos.ap-guangzhou.myqcloud.com/202306101158946.(null)",alt:"img"}})]),s._v(" "),n("p",[s._v("仔细看看，是不是很有道理，但得到的结论却和本文问题 4 得出的结论不符。")]),s._v(" "),n("p",[n("strong",[s._v("谁是对的呢？")])]),s._v(" "),n("p",[s._v("我们顺着它的假设来模拟一下。")]),s._v(" "),n("p",[s._v("假设环的周长为偶数，也就是六个节点。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://superblog-1257126549.cos.ap-guangzhou.myqcloud.com/202306101158301.(null)",alt:"img"}})]),s._v(" "),n("p",[s._v("并且进入环后 slow = 1 ，fast = 3，slow 与 fast 的距离为奇数。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://superblog-1257126549.cos.ap-guangzhou.myqcloud.com/202306101158592.(null)",alt:"img"}})]),s._v(" "),n("p",[s._v("模拟一下，fast 始终会出现在节点 4 和节点 1 这两个位置，当 slow 重新来到节点 1 的时候，fast 又来到了节点 4，如此反复，两者无法相遇。")]),s._v(" "),n("p",[n("strong",[s._v("这个结论是对的？？！！")])]),s._v(" "),n("p",[n("strong",[s._v("这种假设根本就不会成立！")])]),s._v(" "),n("p",[s._v("即进入环后 slow = 1 ，fast = 3，slow 与 fast 的距离为奇数这种假设无法成立。")]),s._v(" "),n("p",[s._v("在进入环之前，slow 和 fast 有一段公共的直线路需要走。")]),s._v(" "),n("p",[s._v("假设这条直线的长度为 m。")]),s._v(" "),n("p",[s._v("那么 slow 需要跳 m 次才能来到环入口位置节点 1 ，fast 需要跳 m/3 次才能第一次来到环入口位置节点 1，环的节点数是 6 个，fast 跑 2 次可以跑完一圈，假设跑了 n 圈，那么就跑了 2n 次，那么再跑一次就来到了节点 4 。")]),s._v(" "),n("p",[s._v("于是有了等式："),n("strong",[s._v("m")]),s._v(" "),n("strong",[s._v("= m / 3 + 2n + 1")]),s._v("。")]),s._v(" "),n("p",[s._v("计算一下得 "),n("strong",[s._v("n = ( 2m / 3 - 1 ) / 2")]),s._v("。")]),s._v(" "),n("p",[s._v("由于 2m 为偶数，根据数学知识"),n("strong",[s._v("一个能被 3 整除的偶数除以 3 仍为偶数")]),s._v("，于是 2m / 3 为偶数，2m / 3 - 1 为奇数， ( 2m / 3 - 1 ) / 2 无法是整数。")]),s._v(" "),n("p",[s._v("所以，"),n("strong",[s._v("找不到这样一个整数 m 和整数 n，使得上面的假设成立")]),s._v("。")]),s._v(" "),n("p",[n("strong",[s._v("假设不成立，结论也不成立！")])]),s._v(" "),n("h2",{attrs:{id:"三、参考代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、参考代码"}},[s._v("#")]),s._v(" "),n("strong",[s._v("三、参考代码")])]),s._v(" "),n("h3",{attrs:{id:"_1、java-代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、java-代码"}},[s._v("#")]),s._v(" "),n("strong",[s._v("1、Java 代码")])]),s._v(" "),n("div",{staticClass:"language-Java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 登录 AlgoMooc 官网获取更多算法图解")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// https://www.algomooc.com")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 作者：程序员吴师兄")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 代码有看不懂的地方一定要私聊咨询吴师兄呀")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 环形链表 II （ LeetCode 142 ） : https://leetcode-cn.com/problems/linked-list-cycle-ii")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("detectCycle")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        \n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1、通过快慢指针的方式，在环中寻找它们的第一次相遇的节点位置")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2、定义一个慢指针，每次只会向前移动 1 步")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" slow "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3、定义一个快指针，每次只会向前移动 2 步")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" fast "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 4、如果链表有环，那么无论怎么移动，fast 指向的节点都是有值的")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("fast "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" fast"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 慢指针每次只会向前移动 1 步")]),s._v("\n            slow "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" slow"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 快指针每次只会向前移动 2 步")]),s._v("\n            fast "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" fast"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 快慢指针相遇，说明有环")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// x 代表从头节点到环形入口节点的节点数（不包含头节点）")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// y 代表从环形入口到第一次相遇节点的节点数（不包含环形入口节点）")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// z 代表从第一次相遇节点到环形入口的节点数（不包含第一次相遇节点）")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// y + z 代表环的节点总数")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 此时，快指针走了 x + y + n (y + z)")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 其中，x + y 表示快指针第一次到达相遇节点，n 代表快指针在环里面绕了多少圈")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 此时，慢指针走了 x + y 步")]),s._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 由于快指针每次走 2 步，所以快慢指针第一次相遇的时候出现一个等式")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// x + y = [x + y + n (y + z)] / 2")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 即 2 * (x + y) = x + y + n (y + z)")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 即 x + y = n（y + z）")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 即 x = n（y + z）- y")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 我们的目的就是去求 x")]),s._v("\n            \n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 定义两个指针，一个指向相遇节点，定义为 b，一个指向链表头节点，定义为 a")]),s._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// b 在环中绕圈圈，走了 n（y + z）步会回到原处，即回到相遇节点处")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 由于 y 代表从环形入口到第一次相遇节点的节点数（不包含环形入口节点）")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 所以 n（y + z） - y 时，b 到达了环形入口节点位置")]),s._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 由于 x 代表从头节点到环形入口节点的节点数（不包含头节点）")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 所以 a 走了 x 步时，a 到达了环形入口节点位置")]),s._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当 x = n（y + z）- y 时，找到了环形入口节点位置")]),s._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 5、开始寻找环入口")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("slow "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" fast"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 定义两个指针，一个指向相遇节点，定义为 b，一个指向链表头节点，定义为 a")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 一个指向相遇节点，定义为 b")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" fast"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 一个指向链表头节点，定义为 a")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ListNode")]),s._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 让 a 、b 两个指针向前移动，每次移动一步，直到相遇位置")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 由于有环，必然相遇")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当 b 走了 n（y + z） - y 时，b 到达了环形入口节点位置")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当 a 走了 x 步时，a 到达了环形入口节点位置")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// a 与 b 相遇")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// a 指针每次只会向前移动 1 步")]),s._v("\n                    a "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// b 指针每次只会向前移动 1 步")]),s._v("\n                    b "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 6、返回 a 和 b 相遇的节点位置就是环形入口节点位置")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 没有环，返回 null")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),n("h3",{attrs:{id:"_2、-c-代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、-c-代码"}},[s._v("#")]),s._v(" **2、**"),n("strong",[s._v("C++")]),s._v(" "),n("strong",[s._v("代码")])]),s._v(" "),n("div",{staticClass:"language-C++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 登录 AlgoMooc 官网获取更多算法图解\n// https://www.algomooc.com\n// 作者：程序员吴师兄\n// 代码有看不懂的地方一定要私聊咨询吴师兄呀\n// 环形链表 II （ LeetCode 142 ） : https://leetcode-cn.com/problems/linked-list-cycle-ii\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        // 1、通过快慢指针的方式，在环中寻找它们的第一次相遇的节点位置\n\n        // 2、定义一个慢指针，每次只会向前移动 1 步\n        ListNode *slow = head;\n        // 3、定义一个快指针，每次只会向前移动 2 步\n        ListNode *fast = head;\n\n        // 4、如果链表有环，那么无论怎么移动，fast 指向的节点都是有值的\n        while (fast != NULL && fast->next != NULL) {\n            // 慢指针每次只会向前移动 1 步\n            slow = slow->next;\n            // 快指针每次只会向前移动 2 步\n            fast = fast->next->next;\n\n            // 快慢指针相遇，说明有环\n            // x 代表从头节点到环形入口节点的节点数（不包含头节点）\n            // y 代表从环形入口到第一次相遇节点的节点数（不包含环形入口节点）\n            // z 代表从第一次相遇节点到环形入口的节点数（不包含第一次相遇节点）\n            // y + z 代表环的节点总数\n            // 此时，快指针走了 x + y + n (y + z)\n            // 其中，x + y 表示快指针第一次到达相遇节点，n 代表快指针在环里面绕了多少圈\n            // 此时，慢指针走了 x + y 步\n\n            // 由于快指针每次走 2 步，所以快慢指针第一次相遇的时候出现一个等式\n            // x + y = [x + y + n (y + z)] / 2\n            // 即 2 * (x + y) = x + y + n (y + z)\n            // 即 x + y = n（y + z）\n            // 即 x = n（y + z）- y\n            // 我们的目的就是去求 x\n            \n            // 定义两个指针，一个指向相遇节点，定义为 b，一个指向链表头节点，定义为 a\n\n            // b 在环中绕圈圈，走了 n（y + z）步会回到原处，即回到相遇节点处\n            // 由于 y 代表从环形入口到第一次相遇节点的节点数（不包含环形入口节点）\n            // 所以 n（y + z） - y 时，b 到达了环形入口节点位置\n\n            // 由于 x 代表从头节点到环形入口节点的节点数（不包含头节点）\n            // 所以 a 走了 x 步时，a 到达了环形入口节点位置\n\n            // 当 x = n（y + z）- y 时，找到了环形入口节点位置\n\n            // 5、开始寻找环入口\n            if (slow == fast) {\n\n                // 定义两个指针，一个指向相遇节点，定义为 b，一个指向链表头节点，定义为 a\n                // 一个指向相遇节点，定义为 b\n                ListNode *b = fast;\n\n                // 一个指向链表头节点，定义为 a\n                ListNode *a = head;\n\n                // 让 a 、b 两个指针向前移动，每次移动一步，直到相遇位置\n                // 由于有环，必然相遇\n                // 当 b 走了 n（y + z） - y 时，b 到达了环形入口节点位置\n                // 当 a 走了 x 步时，a 到达了环形入口节点位置\n                // a 与 b 相遇\n                while (a != b) {\n                    // a 指针每次只会向前移动 1 步\n                    a = a->next;\n                    // b 指针每次只会向前移动 1 步\n                    b = b->next;\n                }\n\n                // 6、返回 a 和 b 相遇的节点位置就是环形入口节点位置\n                return a;\n            }\n        }\n\n        // 没有环，返回 NULL\n        return NULL;\n    }\n};\n")])])]),n("h3",{attrs:{id:"_3、python-代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、python-代码"}},[s._v("#")]),s._v(" "),n("strong",[s._v("3、Python 代码")])]),s._v(" "),n("div",{staticClass:"language-Python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 登录 AlgoMooc 官网获取更多算法图解")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# https://www.algomooc.com")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 作者：程序员吴师兄")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 代码有看不懂的地方一定要私聊咨询吴师兄呀")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 环形链表 II （ LeetCode 142 ） : https://leetcode-cn.com/problems/linked-list-cycle-ii")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("detectCycle")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ListNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" ListNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1、通过快慢指针的方式，在环中寻找它们的第一次相遇的节点位置")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2、定义一个慢指针，每次只会向前移动 1 步")]),s._v("\n        slow "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" head\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 3、定义一个快指针，每次只会向前移动 2 步")]),s._v("\n        fast "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" head\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 4、如果链表有环，那么无论怎么移动，fast 指向的节点都是有值的")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" fast "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" fast"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("next")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 慢指针每次只会向前移动 1 步")]),s._v("\n            slow "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" slow"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("next")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 快指针每次只会向前移动 2 步")]),s._v("\n            fast "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" fast"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("next")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("next")]),s._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 快慢指针相遇，说明有环")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# x 代表从头节点到环形入口节点的节点数（不包含头节点）")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# y 代表从环形入口到第一次相遇节点的节点数（不包含环形入口节点）")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# z 代表从第一次相遇节点到环形入口的节点数（不包含第一次相遇节点）")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# y + z 代表环的节点总数")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 此时，快指针走了 x + y + n y + z)")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 其中，x + y 表示快指针第一次到达相遇节点，n 代表快指针在环里面绕了多少圈")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 此时，慢指针走了 x + y 步")]),s._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 由于快指针每次走 2 步，所以快慢指针第一次相遇的时候出现一个等式")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# x + y = [x + y + n y + z)] / 2")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 即 2 * x + y) = x + y + n y + z)")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 即 x + y = n（y + z）")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 即 x = n（y + z）- y")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 我们的目的就是去求 x")]),s._v("\n            \n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义两个指针，一个指向相遇节点，定义为 b，一个指向链表头节点，定义为 a")]),s._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# b 在环中绕圈圈，走了 n（y + z）步会回到原处，即回到相遇节点处")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 由于 y 代表从环形入口到第一次相遇节点的节点数（不包含环形入口节点）")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 所以 n（y + z） - y 时，b 到达了环形入口节点位置")]),s._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 由于 x 代表从头节点到环形入口节点的节点数（不包含头节点）")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 所以 a 走了 x 步时，a 到达了环形入口节点位置")]),s._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当 x = n（y + z）- y 时，找到了环形入口节点位置")]),s._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 5、开始寻找环入口")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" slow "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" fast "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义两个指针，一个指向相遇节点，定义为 b，一个指向链表头节点，定义为 a")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 一个指向相遇节点，定义为 b")]),s._v("\n                b "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" fast\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 一个指向链表头节点，定义为 a")]),s._v("\n                a "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" head\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 让 a 、b 两个指针向前移动，每次移动一步，直到相遇位置")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 由于有环，必然相遇")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当 b 走了 n（y + z） - y 时，b 到达了环形入口节点位置")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当 a 走了 x 步时，a 到达了环形入口节点位置")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# a 与 b 相遇")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" b "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# a 指针每次只会向前移动 1 步")]),s._v("\n                    a "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("next")]),s._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# b 指针每次只会向前移动 1 步")]),s._v("\n                    b "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("next")]),s._v("\n                \n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 6、返回 a 和 b 相遇的节点位置就是环形入口节点位置")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" a\n            \n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 没有环，返回 None")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),s._v("\n")])])]),n("h2",{attrs:{id:"四、复杂度分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、复杂度分析"}},[s._v("#")]),s._v(" "),n("strong",[s._v("四、复杂度分析")])]),s._v(" "),n("p",[s._v("时间复杂度：O(N)，其中 NN 为链表中节点的数目。在最初判断快慢指针是否相遇时，slow 指针走过的距离不会超过链表的总长度；随后寻找入环点时，走过的距离也不会超过链表的总长度。因此，总的执行时间为 O(N)+O(N)=O(N)。")]),s._v(" "),n("p",[s._v("空间复杂度：O(1)。")])])}),[],!1,null,null,null);t.default=e.exports}}]);