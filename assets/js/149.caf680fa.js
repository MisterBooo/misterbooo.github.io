(window.webpackJsonp=window.webpackJsonp||[]).push([[149],{538:function(t,s,n){"use strict";n.r(s);var a=n(54),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"leetcode-148、排序链表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-148、排序链表"}},[t._v("#")]),t._v(" LeetCode 148、排序链表")]),t._v(" "),n("h2",{attrs:{id:"一、题目描述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、题目描述"}},[t._v("#")]),t._v(" 一、题目描述")]),t._v(" "),n("p",[t._v("给你链表的头结点 "),n("code",[t._v("head")]),t._v(" ，请将其按 "),n("strong",[t._v("升序")]),t._v(" 排列并返回 "),n("strong",[t._v("排序后的链表")]),t._v(" 。"),n("strong",[t._v("示例 1：")])]),t._v(" "),n("p",[n("img",{attrs:{src:"https://superblog-1257126549.cos.ap-guangzhou.myqcloud.com/202306111034503.(null)",alt:"img"}})]),t._v(" "),n("p",[t._v("img")]),t._v(" "),n("div",{staticClass:"language-Plain extra-class"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[t._v("输入：head = [4,2,1,3]\n输出：[1,2,3,4]\n")])])]),n("p",[n("strong",[t._v("示例 2：")])]),t._v(" "),n("p",[n("img",{attrs:{src:"https://superblog-1257126549.cos.ap-guangzhou.myqcloud.com/202306111034725.(null)",alt:"img"}})]),t._v(" "),n("p",[t._v("img")]),t._v(" "),n("div",{staticClass:"language-Plain extra-class"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[t._v("输入：head = [-1,5,3,4,0]\n输出：[-1,0,3,4,5]\n")])])]),n("p",[n("strong",[t._v("示例 3：")])]),t._v(" "),n("div",{staticClass:"language-Plain extra-class"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[t._v("输入：head = []\n输出：[] \n")])])]),n("p",[n("strong",[t._v("提示：")])]),t._v(" "),n("ul",[n("li",[t._v("链表中节点的数目在范围 "),n("code",[t._v("[0, 5 * 10^4]")]),t._v(" 内")]),t._v(" "),n("li",[n("code",[t._v("-10^5 <= Node.val <= 10^5")])])]),t._v(" "),n("p",[t._v("**进阶：**你可以在 "),n("code",[t._v("O(n log n)")]),t._v(" 时间复杂度和常数级空间复杂度下，对链表进行排序吗？")]),t._v(" "),n("h2",{attrs:{id:"二、题目解析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、题目解析"}},[t._v("#")]),t._v(" 二、题目解析")]),t._v(" "),n("p",[t._v("题目要求时间空间复杂度分别为 O(nlogn) 和 O(1) ，根据时间复杂度和题目中的"),n("strong",[t._v("排序")]),t._v("两个字，可以联想到"),n("strong",[t._v("归并排序")]),t._v("和"),n("strong",[t._v("快速排序")]),t._v("。")]),t._v(" "),n("p",[t._v("所以，本题有两种解法："),n("strong",[t._v("归并排序")]),t._v("和"),n("strong",[t._v("快速排序")]),t._v("。")]),t._v(" "),n("p",[t._v("这里我们先用"),n("strong",[t._v("归并排序")]),t._v("的思路进行处理，其中"),n("strong",[t._v("合并")]),t._v("的基本操作如下：")]),t._v(" "),n("ul",[n("li",[t._v("1、长度为 1 的链表和长度为 1 的链表合并后，形成一个长度为 2 的链表")]),t._v(" "),n("li",[t._v("2、长度为 2 的链表和长度为 2 的链表合并后，形成一个长度为 4 的链表")]),t._v(" "),n("li",[t._v("。。。")])]),t._v(" "),n("p",[t._v("而由于合并过程中操作的是链表，所以需要有"),n("strong",[t._v("断链")]),t._v("和"),n("strong",[t._v("重新连接")]),t._v("的过程。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://superblog-1257126549.cos.ap-guangzhou.myqcloud.com/202306111034137.(null)",alt:"img"}})]),t._v(" "),n("p",[t._v("具体操作步骤如下：")]),t._v(" "),n("p",[t._v("1、先获取链表长度，基于这个长度才能知道后续合并到什么时候截止")]),t._v(" "),n("p",[t._v("2、设置三个指针 "),n("code",[t._v("prev")]),t._v("、 "),n("code",[t._v("curr")]),t._v("、 "),n("code",[t._v("next")]),t._v("。")]),t._v(" "),n("p",[t._v("其中， "),n("code",[t._v("prev")]),t._v("表示已经排序好的链表的【尾节点】。")]),t._v(" "),n("p",[n("code",[t._v("curr")]),t._v(" 一开始设置为准备排序的那些节点的【首节点】，然后向后移动，获取相应的节点，到达所有正在准备排序的那些节点的【尾节点】位置。")]),t._v(" "),n("p",[n("code",[t._v("next")]),t._v(" 表示接下来需要排序的那些节点的【首节点】。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://superblog-1257126549.cos.ap-guangzhou.myqcloud.com/202306111034313.(null)",alt:"img"}})]),t._v(" "),n("p",[t._v("3、断开 "),n("code",[t._v("prev")]),t._v(" 与 "),n("code",[t._v("curr")]),t._v(" 的连接，再断开 "),n("code",[t._v("curr")]),t._v(" 与 "),n("code",[t._v("next")]),t._v(" 的连接。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://superblog-1257126549.cos.ap-guangzhou.myqcloud.com/202306111034465.(null)",alt:"img"}})]),t._v(" "),n("p",[t._v("4、把 "),n("code",[t._v("curr")]),t._v(" 访问的这些节点划分为两个区域，区域的长度取决于此时进行到了长度为多少的链表进行合并操作，一个是左链表，一个是右链表，把这两个链表进行合并操作。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://superblog-1257126549.cos.ap-guangzhou.myqcloud.com/202306111034714.(null)",alt:"img"}})]),t._v(" "),n("p",[t._v("5、合并成功之后，"),n("code",[t._v("prev")]),t._v(" 移动到尾部，"),n("code",[t._v("curr")]),t._v(" 来到 "),n("code",[t._v("next")]),t._v(" 的位置，继续后面的归并操作。")]),t._v(" "),n("p",[t._v("6、这样一轮下来，已经把长度为 2 的链表和长度为 2 的链表合并，形成了一个长度为 4 的链表。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://superblog-1257126549.cos.ap-guangzhou.myqcloud.com/202306111034933.(null)",alt:"img"}})]),t._v(" "),n("p",[t._v("7、接下来，只需要执行上述同样的操作，唯一的修改点在于合并的子链表长度变成了 4。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://superblog-1257126549.cos.ap-guangzhou.myqcloud.com/202306111034177.(null)",alt:"img"}})]),t._v(" "),n("h2",{attrs:{id:"三、参考代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、参考代码"}},[t._v("#")]),t._v(" 三、参考代码")]),t._v(" "),n("h3",{attrs:{id:"_1、java-代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、java-代码"}},[t._v("#")]),t._v(" 1、Java 代码")]),t._v(" "),n("div",{staticClass:"language-Java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 登录 AlgoMooc 官网获取更多算法图解")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// https://www.algomooc.com")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 作者：程序员吴师兄")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码有看不懂的地方一定要私聊咨询吴师兄呀")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 排序链表（LeetCode 148）：https://leetcode.cn/problems/sort-list/")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sortList")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获链表的总长度")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" length "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从链表的头节点开始访问")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" node "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 利用 while 循环，可以统计出链表的节点个数，即长度")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n            length"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            node "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在原链表的头部设置一个虚拟头节点")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为可能会操作到原链表的头节点")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置了虚拟头节点后，原链表的头节点和原链表的其它节点地位一样")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" dummyHead "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 利用 for 循环，执行合并的操作")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 长度为 1 的链表和长度为 1 的链表合并后，形成一个长度为 2 的链表")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 长度为 2 的链表和长度为 2 的链表合并后，形成一个长度为 4 的链表")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 长度为 4 的链表和长度为 4 的链表合并后，形成一个长度为 8 的链表")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 长度为 8 的链表和长度为 8 的链表合并后，形成一个长度为 16 的链表")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 也有可能是，长度为 8 的链表和长度为 5 的链表合并后，形成一个长度为 13 的链表")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 但是，每次合并过程中，子链表都会想要扩充为原来的两倍")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 直到子链表想要扩充的长度超过了 length")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" subLength "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" subLength "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" subLength "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 整个归并过程分为三个步骤")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1、不停的划分，直到无法划分为止")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2、开始两两合并")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3、每次合并之后的结果都需要连接起来")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 每次都把结果连接到 dummyHead，因此先记录一下")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// prev 表示已经排序好的链表的【尾节点】")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" prev "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dummyHead"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            \n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dummyHead 的后面节点才是原链表的节点，需要把它们进行划分")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// curr 表示所有正在准备排序的那些节点的【尾节点】")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" curr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dummyHead"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 利用 while 循环，寻找出每次划分后子链表的头节点")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("curr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                \n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 每次都是两个子链表开始合并")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1、先寻找出【左子链表】，长度为 subLength")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" head1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" curr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过 for 循环，找出 subLength 个节点来")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// curr 的索引为 0 ，需要再找 subLength - 1 个节点来")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" subLength "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" curr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n                    curr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" curr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2、再寻找出【右子链表】，长度最多为 subLength，甚至有可能长度为 0")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" head2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" curr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此时，需要将【左子链表】与【右子链表】的连接断开")]),t._v("\n                curr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// curr 来到【右子链表】的头部")]),t._v("\n                curr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过 for 循环，找出【右子链表】的那些节点来")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 【右子链表】的节点个数可能达不到 subLength，甚至只有 1 个或者 0 个节点")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" subLength "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" curr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" curr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n                    curr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" curr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取到【右子链表】之后，需要把它和后续链表断开")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// next 表示接下来需要排序的那些节点的【首节点】")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" next "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 curr != null，那么说明【右子链表】的节点个数达到了 subLength 个，并且后续还有节点")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("curr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    \n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录一下后面节点")]),t._v("\n                    next "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" curr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 再将【右子链表】和后续链表断开")]),t._v("\n                    curr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将【左子链表】与【右子链表】合并")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" merged "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("mergeTwoLists")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" head2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 合并之后的结果需要连接到前一个链表")]),t._v("\n                prev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" merged"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// prev 来到链表的尾部，是下一个即将合成链表之后的前一个链表的尾节点")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n                    prev "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// curr 来到 next，处理后面的节点")]),t._v("\n                curr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" dummyHead"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 合并两个有序链表的代码")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("mergeTwoLists")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一开始设置一个虚拟节点，它的值为 -1，它的值可以设置为任何的数，因为我们根本不需要使用它的值")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" dummy "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置一个指针，指向虚拟节点")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" pre "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dummy"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过一个循环，不断的比较 l1 和 l2 中当前节点值的大小，直到 l1 或者 l2 遍历完毕为止")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" l2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 l1 当前节点的值小于等于了 l2 当前节点的值")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 让 pre 指向节点的 next 指针指向这个更小值的节点")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 即指向 l1")]),t._v("\n                pre"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 让 l1 向后移动")]),t._v("\n                l1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 让 pre 指向节点的 next 指针指向这个更小值的节点")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 即指向 l2")]),t._v("\n                pre"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 让 l2 向后移动")]),t._v("\n                l2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 让 pre 向后移动")]),t._v("\n            pre "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pre"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 跳出循环后，l1 或者 l2 中可能有剩余的节点没有被观察过")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 直接把剩下的节点加入到 pre 的 next 指针位置")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 l1 中还有节点")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把 l1 中剩下的节点全部加入到 pre 的 next 指针位置")]),t._v("\n            pre"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 l2 中还有节点")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把 l2 中剩下的节点全部加入到 pre 的 next 指针位置")]),t._v("\n            pre"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最后返回虚拟节点的 next 指针")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" dummy"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"_2、c-代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、c-代码"}},[t._v("#")]),t._v(" 2、C++ 代码")]),t._v(" "),n("div",{staticClass:"language-C++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class Solution {\npublic:\n    ListNode* sortList(ListNode* head) {\n        // 获链表的总长度\n        int length = 0;\n\n        // 从链表的头节点开始访问\n        ListNode* node = head;\n\n        // 利用 while 循环，可以统计出链表的节点个数，即长度\n        while (node != NULL) {\n\n            length++;\n\n            node = node->next;\n\n        }\n\n        // 在原链表的头部设置一个虚拟头节点\n        // 因为可能会操作到原链表的头节点\n        // 设置了虚拟头节点后，原链表的头节点和原链表的其它节点地位一样\n        ListNode* dummyHead = new ListNode(0, head);\n\n        // 利用 for 循环，执行合并的操作\n        // 长度为 1 的链表和长度为 1 的链表合并后，形成一个长度为 2 的链表\n        // 长度为 2 的链表和长度为 2 的链表合并后，形成一个长度为 4 的链表\n        // 长度为 4 的链表和长度为 4 的链表合并后，形成一个长度为 8 的链表\n        // 长度为 8 的链表和长度为 8 的链表合并后，形成一个长度为 16 的链表\n        // 也有可能是，长度为 8 的链表和长度为 5 的链表合并后，形成一个长度为 13 的链表\n        // 但是，每次合并过程中，子链表都会想要扩充为原来的两倍\n        // 直到子链表想要扩充的长度超过了 length\n        for (int subLength = 1; subLength < length; subLength = 2) {\n\n            // 整个归并过程分为三个步骤\n            // 1、不停的划分，直到无法划分为止\n            // 2、开始两两合并\n            // 3、每次合并之后的结果都需要连接起来\n\n            // 每次都把结果连接到 dummyHead，因此先记录一下\n            // prev 表示已经排序好的链表的【尾节点】\n            ListNode prev = dummyHead;\n            \n            // dummyHead 的后面节点才是原链表的节点，需要把它们进行划分\n            // curr 表示所有正在准备排序的那些节点的【尾节点】\n            ListNode* curr = dummyHead->next;\n\n            // 利用 while 循环，寻找出每次划分后子链表的头节点\n            while (curr != NULL) {\n                \n                // 每次都是两个子链表开始合并\n\n                // 1、先寻找出【左子链表】，长度为 subLength\n                ListNode* head1 = curr;\n\n                // 通过 for 循环，找出 subLength 个节点来\n                // curr 的索引为 0 ，需要再找 subLength - 1 个节点来\n                for (int i = 1; i < subLength && curr->next != NULL; i++) {\n\n                    curr = curr->next;\n\n                }\n\n                // 2、再寻找出【右子链表】，长度最多为 subLength，甚至有可能长度为 0\n                ListNode* head2 = curr->next;\n\n                // 此时，需要将【左子链表】与【右子链表】的连接断开\n                curr->next = NULL;\n\n                // curr 来到【右子链表】的头部\n                curr = head2;\n\n                // 通过 for 循环，找出【右子链表】的那些节点来\n                // 【右子链表】的节点个数可能达不到 subLength，甚至只有 1 个或者 0 个节点\n                for (int i = 1; i < subLength && curr != NULL && curr->next != NULL; i++) {\n\n                    curr = curr->next;\n\n                }\n\n                // 获取到【右子链表】之后，需要把它和后续链表断开\n                //->next 表示接下来需要排序的那些节点的【首节点】\n                ListNode* next = NULL;\n\n                // 如果 curr != NULL，那么说明【右子链表】的节点个数达到了 subLength 个，并且后续还有节点\n                if (curr != NULL) {\n                    \n                    // 记录一下后面节点\n                    next = curr->next;\n\n                    // 再将【右子链表】和后续链表断开\n                    curr->next = NULL;\n\n                }\n\n                // 将【左子链表】与【右子链表】合并\n                ListNode* merged = mergeTwoLists(head1, head2);\n\n                // 合并之后的结果需要连接到前一个链表\n                prev->next = merged;\n\n                // prev 来到链表的尾部，是下一个即将合成链表之后的前一个链表的尾节点\n                while (prev->next != NULL) {\n\n                    prev = prev->next;\n\n                }\n\n                // curr 来到 next，处理后面的节点\n                curr = next;\n            }\n\n        }\n\n        return dummyHead->next;\n\n    }\n\n\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        // 一开始设置一个虚拟节点，它的值为 -1，它的值可以设置为任何的数，因为我们根本不需要使用它的值\n        ListNode *dummy = new ListNode(-1);\n\n        // 设置一个指针，指向虚拟节点\n        ListNode *pre = dummy;\n\n        // 通过一个循环，不断的比较 l1 和 l2 中当前节点值的大小，直到 l1 或者 l2 遍历完毕为止\n        while (l1 != NULL && l2 != NULL) {\n            // 如果 l1 当前节点的值小于等于了 l2 当前节点的值\n            if (l1->val <= l2->val) {\n                // 让 pre 指向节点的 next 指针指向这个更小值的节点\n                // 即指向 l1\n                pre->next = l1;\n                // 让 l1 向后移动\n                l1 = l1->next;\n            }else {\n                // 让 pre 指向节点的 next 指针指向这个更小值的节点\n                // 即指向 l2\n                pre->next =l2;\n                // 让 l2 向后移动\n                l2 = l2->next;\n            }\n            // 让 pre 向后移动\n            pre = pre->next;\n        }\n\n        // 跳出循环后，l1 或者 l2 中可能有剩余的节点没有被观察过\n        // 直接把剩下的节点加入到 pre 的 next 指针位置\n\n        // 如果 l1 中还有节点\n        if (l1 != NULL) {\n            // 把 l1 中剩下的节点全部加入到 pre 的 next 指针位置\n            pre->next = l1;\n        }\n\n        // 如果 l2 中还有节点\n        if (l2 != NULL) {\n            // 把 l2 中剩下的节点全部加入到 pre 的 next 指针位置\n            pre->next = l2;\n        }\n\n        // 最后返回虚拟节点的 next 指针\n        return dummy->next;\n    }\n\n\n};\n")])])]),n("h3",{attrs:{id:"_3、python-代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、python-代码"}},[t._v("#")]),t._v(" 3、Python 代码")]),t._v(" "),n("div",{staticClass:"language-Python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sortList")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" head"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Optional"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ListNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Optional"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ListNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获链表的总长度")]),t._v("\n        length "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从链表的头节点开始访问")]),t._v("\n        node "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 利用 while 循环，可以统计出链表的节点个数，即长度")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" node "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n\n            length "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n            node "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在原链表的头部设置一个虚拟头节点")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 因为可能会操作到原链表的头节点")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置了虚拟头节点后，原链表的头节点和原链表的其它节点地位一样")]),t._v("\n        dummyHead "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ListNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        dummyHead"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 利用 for 循环，执行合并的操作")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 长度为 1 的链表和长度为 1 的链表合并后，形成一个长度为 2 的链表")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 长度为 2 的链表和长度为 2 的链表合并后，形成一个长度为 4 的链表")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 长度为 4 的链表和长度为 4 的链表合并后，形成一个长度为 8 的链表")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 长度为 8 的链表和长度为 8 的链表合并后，形成一个长度为 16 的链表")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 也有可能是，长度为 8 的链表和长度为 5 的链表合并后，形成一个长度为 13 的链表")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 但是，每次合并过程中，子链表都会想要扩充为原来的两倍")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 直到子链表想要扩充的长度超过了 length")]),t._v("\n        subLength "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" \n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" subLength "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" length "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 整个归并过程分为三个步骤")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1、不停的划分，直到无法划分为止")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2、开始两两合并")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3、每次合并之后的结果都需要连接起来")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 每次都把结果连接到 dummyHead，因此先记录一下")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# prev 表示已经排序好的链表的【尾节点】")]),t._v("\n            prev "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dummyHead\n            \n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# dummyHead 的后面节点才是原链表的节点，需要把它们进行划分")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# curr 表示所有正在准备排序的那些节点的【尾节点】")]),t._v("\n            curr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dummyHead"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 利用 while 循环，寻找出每次划分后子链表的头节点")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v("  curr "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                \n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 每次都是两个子链表开始合并")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1、先寻找出【左子链表】，长度为 subLength")]),t._v("\n                head1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" curr\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过 for 循环，找出 subLength 个节点来")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# curr 的索引为 0 ，需要再找 subLength - 1 个节点来")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" subLength "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" curr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                       curr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" curr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2、再寻找出【右子链表】，长度最多为 subLength，甚至有可能长度为 0")]),t._v("\n                head2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" curr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 此时，需要将【左子链表】与【右子链表】的连接断开")]),t._v("\n                curr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# curr 来到【右子链表】的头部")]),t._v("\n                curr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head2\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过 for 循环，找出【右子链表】的那些节点来")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 【右子链表】的节点个数可能达不到 subLength，甚至只有 1 个或者 0 个节点")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" subLength "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" curr "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" curr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                       curr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" curr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取到【右子链表】之后，需要把它和后续链表断开")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# next 表示接下来需要排序的那些节点的【首节点】")]),t._v("\n                nextNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果 curr != None，那么说明【右子链表】的节点个数达到了 subLength 个，并且后续还有节点")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v("  curr "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    \n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 记录一下后面节点")]),t._v("\n                    nextNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" curr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 再将【右子链表】和后续链表断开")]),t._v("\n                    curr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v("\n\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将【左子链表】与【右子链表】合并")]),t._v("\n                merged "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mergeTwoLists"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" head2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 合并之后的结果需要连接到前一个链表")]),t._v("\n                prev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" merged\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# prev 来到链表的尾部，是下一个即将合成链表之后的前一个链表的尾节点")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" prev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n                    prev "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n\n                \n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# curr 来到 next，处理后面的节点")]),t._v("\n                curr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextNode\n\n            subLength "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" subLength "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" dummyHead"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n    \n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("mergeTwoLists")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ListNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ListNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ListNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 一开始设置一个虚拟节点，它的值为 -1，它的值可以设置为任何的数，因为我们根本不需要使用它的值")]),t._v("\n        dummy "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ListNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置一个指针，指向虚拟节点")]),t._v("\n        pre "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dummy\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过一个循环，不断的比较 l1 和 l2 中当前节点值的大小，直到 l1 或者 l2 遍历完毕为止")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" l1 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果 l1 当前节点的值小于等于了 l2 当前节点的值")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 让 pre 指向节点的 next 指针指向这个更小值的节点")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 即指向 l1")]),t._v("\n                pre"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l1\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 让 l1 向后移动")]),t._v("\n                l1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 让 pre 指向节点的 next 指针指向这个更小值的节点")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 即指向 l2")]),t._v("\n                pre"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("l2\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 让 l2 向后移动")]),t._v("\n                l2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 让 pre 向后移动")]),t._v("\n            pre "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pre"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 跳出循环后，l1 或者 l2 中可能有剩余的节点没有被观察过")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 直接把剩下的节点加入到 pre 的 next 指针位置")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果 l1 中还有节点")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" l1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 把 l1 中剩下的节点全部加入到 pre 的 next 指针位置")]),t._v("\n            pre"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l1\n\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果 l2 中还有节点")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" l2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 把 l2 中剩下的节点全部加入到 pre 的 next 指针位置")]),t._v("\n            pre"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 最后返回虚拟节点的 next 指针")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" dummy"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n")])])]),n("h2",{attrs:{id:"四、复杂度分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、复杂度分析"}},[t._v("#")]),t._v(" 四、复杂度分析")]),t._v(" "),n("p",[n("strong",[t._v("时间复杂度")]),t._v("：O(nlogn)")]),t._v(" "),n("p",[t._v("**空间复杂度：**O(1)")])])}),[],!1,null,null,null);s.default=e.exports}}]);