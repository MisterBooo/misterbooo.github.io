(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{449:function(s,n,t){"use strict";t.r(n);var a=t(54),e=Object(a.a)({},(function(){var s=this,n=s.$createElement,t=s._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"leetcode-264、丑数ii-动态规划"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-264、丑数ii-动态规划"}},[s._v("#")]),s._v(" LeetCode 264、丑数II（动态规划）")]),s._v(" "),t("h2",{attrs:{id:"一、题目描述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、题目描述"}},[s._v("#")]),s._v(" "),t("strong",[s._v("一、题目描述")])]),s._v(" "),t("p",[s._v("我们把只包含质因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。")]),s._v(" "),t("p",[t("strong",[s._v("示例:")])]),s._v(" "),t("p",[s._v("输入: n = 10 输出: 12 解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。")]),s._v(" "),t("p",[t("strong",[s._v("说明:")])]),s._v(" "),t("ol",[t("li",[t("code",[s._v("1")]),s._v(" 是丑数。")]),s._v(" "),t("li",[t("code",[s._v("n")]),s._v(" "),t("strong",[s._v("不超过")]),s._v("1690。")])]),s._v(" "),t("h2",{attrs:{id:"二、题目解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、题目解析"}},[s._v("#")]),s._v(" "),t("strong",[s._v("二、题目解析")])]),s._v(" "),t("p",[s._v("对于任意一个丑数来说，它都可以和 2、3、5 进行相乘得到一个丑， 那么每个丑数都可以得到三个数，这三个数分别属于不同的数组中。")]),s._v(" "),t("p",[s._v("假设当前已经知道"),t("strong",[s._v("丑数序列")]),s._v(" nums 是这些元素："),t("code",[s._v("1, 2, 3, 4, 5, 6, 8, 9")]),s._v(" 。")]),s._v(" "),t("p",[s._v("1、nums2 数组存储了这个序列中所有丑数与 2 相乘的结果，nums2 = { 1 * 2 ， 2 * 2 ，3 * 2 ， 4 * 2 ，5 * 2 ，6 * 2 ，8 * 2，。。。}")]),s._v(" "),t("p",[s._v("2、nums3 数组存储了这个序列中所有丑数与 3 相乘的结果，nums3 = { 1 * 3 ， 2 * 3 ，3 * 3 ， 4 * 3 ，5 * 3 ，6 * 3 ，8 * 3，。。。}")]),s._v(" "),t("p",[s._v("3、nums5 数组存储了这个序列中所有丑数与 5 相乘的结果，nums5 = { 1 * 5 ， 2 * 5 ，3 * 5 ， 4 * 5 ，5 * 5 ，6 * 5 ，8 * 5，。。。}")]),s._v(" "),t("p",[s._v("那么，想填充 nums  的话，它的选择来源肯定只能来源于 nums2 、nums3、nums5 这三个数组。")]),s._v(" "),t("p",[s._v("并且 nums 序列接下来填充的数是  nums2 、nums3、nums5 这三个数组除去已经在  nums 序列的丑数时剩下的最小值。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://superblog-1257126549.cos.ap-guangzhou.myqcloud.com/202306141007743.(null)",alt:"img"}})]),s._v(" "),t("p",[s._v("也就是说，"),t("strong",[s._v("每次寻找丑数的过程是在   nums2 、nums3、nums5 这三个数组中寻找最小值的过程。")])]),s._v(" "),t("ul",[t("li",[s._v("1、在寻找过程中，因为丑数的序列在不断的扩充，nums2 、nums3、nums5 这三个数组也在不断的扩充。")]),s._v(" "),t("li",[s._v("2、每次找到那个最小值之后，接下来的寻找过程应该忽略它了。")])]),s._v(" "),t("p",[s._v("那么，现在来看   nums2 、nums3、nums5 这三个数组的起始状态，此时，丑数序列只有一个元素 "),t("code",[s._v("ugly[0] = 1")]),s._v(" 。")]),s._v(" "),t("ul",[t("li",[s._v("nums2 ：{1 * 2......}")]),s._v(" "),t("li",[s._v("nums3： {1 * 3......}")]),s._v(" "),t("li",[s._v("nums5 ：{1 * 5......}")])]),s._v(" "),t("p",[t("strong",[s._v("第二个")]),s._v("丑数序列需要去获取 nums2 、nums3、nums5 这三个数组的第一个元素的最小值。")]),s._v(" "),t("p",[s._v("那么，此时可以设置三个索引，分别指向 nums2、nums3、nums5 数组开始的位置。")]),s._v(" "),t("ul",[t("li",[s._v("index2 指向 nums2 数组")]),s._v(" "),t("li",[s._v("index3 指向 nums3 数组")]),s._v(" "),t("li",[s._v("index5 指向 nums5 数组")])]),s._v(" "),t("p",[s._v("比较的结果是发现 1 * 2 最小，于是第二个丑数找到了，此时 ugly 就变成 { 1 , 2 } ，nums2 、nums3、nums5 这三个数组也需要得到扩充。")]),s._v(" "),t("ul",[t("li",[s._v("nums2  ：{1 * 2 ，2 * 2 ，......}")]),s._v(" "),t("li",[s._v("nums3： {1 * 3， 2 * 3 ，......}")]),s._v(" "),t("li",[s._v("nums5 ：{1 * 5， 2 * 5 ，......}")])]),s._v(" "),t("p",[s._v("刚才我们说过，每次找到那个最小值之后，接下来的寻找过程应该忽略它了，用代码的形式来表示就是索引值向后移动。")]),s._v(" "),t("p",[s._v("比如在 nums2 上找到了 1 * 2 之后，index2  开始移动到 2 * 2 的位置。")]),s._v(" "),t("p",[t("strong",[s._v("第三个")]),s._v("丑数序列需要去获取 nums2 、nums3、nums5 这三个数组中 index2、index3、index5 指向元素的最小值。")]),s._v(" "),t("ul",[t("li",[s._v("index2 指向了 nums2  中的 2 * 2，即 nums2[index2]")]),s._v(" "),t("li",[s._v("index3 指向了 nums3  中的 1 * 3，即 nums3[index3]")]),s._v(" "),t("li",[s._v("index5 指向了 nums5  中的 1 * 5，即 nums5[index5]")])]),s._v(" "),t("p",[s._v("如此不断的循环，就可以把 ugly  数组填充到 n 的位置，得到 ugly[n]。")]),s._v(" "),t("p",[s._v("这里需要注意到， nums2 、nums3、nums5 这三个数组并没有具体的额外创造出来，它们都在 ugly  数组中。")]),s._v(" "),t("ul",[t("li",[s._v("nums2  实际上就是 ugly[]*2 的结果")]),s._v(" "),t("li",[s._v("nums3  实际上就是 ugly[]*3 的结果")]),s._v(" "),t("li",[s._v("nums5  实际上就是 ugly[]*5 的结果")])]),s._v(" "),t("p",[s._v("所以比较的过程，实际上就是比较 "),t("code",[s._v("nums2[index2] = ugly[index2] * 2")]),s._v(" 、 "),t("code",[s._v("nums3[index3] = ugly[index3] * 3")]),s._v("、 "),t("code",[s._v("nums5[index5] = ugly[index5] * 5")]),s._v(" 三者大小的过程，获取到最小值就填充到 ugly  数组中，再将对应的索引向后移动，由于 nums2 、nums3、nums5 这三个数组中会存在重复元素，所以需要执行去重的操作。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://superblog-1257126549.cos.ap-guangzhou.myqcloud.com/202306141007505.(null)",alt:"img"}})]),s._v(" "),t("h2",{attrs:{id:"三、参考代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、参考代码"}},[s._v("#")]),s._v(" "),t("strong",[s._v("三、参考代码")])]),s._v(" "),t("h3",{attrs:{id:"_1、java-代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、java-代码"}},[s._v("#")]),s._v(" "),t("strong",[s._v("1、Java 代码")])]),s._v(" "),t("div",{staticClass:"language-Java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 登录 AlgoMooc 官网获取更多算法图解")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// https://www.algomooc.com")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 作者：程序员吴师兄")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 代码有看不懂的地方一定要私聊咨询吴师兄呀")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("nthUglyNumber")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 设置一个数组，用来存放结果")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// nums[0] 表示第 1 个丑数，结果是 1")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// nums[1] 表示第 2 个丑数，结果是 2")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// nums[n-1] 表示第 n 个丑数，结果需要计算")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" nums "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// nums[0] 表示第 1 个丑数，结果是 1")]),s._v("\n        nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 对于任意一个丑数来说，它总是可以由前面的丑数与 2、3、5 其中一个进行相乘而来的")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 那么每个丑数都可以得到三个数，这三个数分别属于不同的数组中")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// nums2 = {1*2, 2*2, 3*2, 4*2, 5*2, 6*2, 8*2...}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// nums3 = {1*3, 2*3, 3*3, 4*3, 5*3, 6*3, 8*3...}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// nums5 = {1*5, 2*5, 3*5, 4*5, 5*5, 6*5, 8*5...}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// nums2 按照从小到大的顺序存放了所有丑数和 2 相乘的结果")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// nums3 按照从小到大的顺序存放了所有丑数和 3 相乘的结果")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// nums5 按照从小到大的顺序存放了所有丑数和 5 相乘的结果")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// nums[i] 的值就是在这三个数组中进行挑选")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 设置三个索引，分别指向 nums2、nums3、nums5 数组开始的位置")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 每当 nums[i] 的值从哪个数组中获取到，该索引就在这个数组中向后移动")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// index2 指向 nums2 数组")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" index2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// index3 指向 nums3 数组")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" index3 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// index5 指向 nums5 数组")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" index5 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 开始填充 nums 数组")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            \n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// nums[i] 的值就是在这三个数组中进行挑选最小值")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 但是，这三个数组并没有具体的额外创造出来，它们都在 nums 数组中")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 其中 nums[index2] 表示的就是第 index2 个丑数，nums[index2] * 2 在数组 nums2 中的位置为 index2")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 其中 nums[index3] 表示的就是第 index3 个丑数，nums[index3] * 3 在数组 nums3 中的位置为 index3")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 其中 nums[index5] 表示的就是第 index5 个丑数，nums[index5] * 5 在数组 nums5 中的位置为 index5")]),s._v("\n            nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Math")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("min")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Math")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("min")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("index2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("index3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("index5"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 执行完上面的代码之后，nums[i] 已经被填充完毕")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 那么和它相等的数需要被挪出接下来的比较")]),s._v("\n\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// nums[i] == nums[index2] * 2")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 移动 index2 到下一个数")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("index2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                index2"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// nums[i] == nums[index3] * 3")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 移动 index3 到下一个数")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("index3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                index3"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            \n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// nums[i] == nums[index5] * 5")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 移动 index5 到下一个数")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("index5"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                index5"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 返回结果")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("h2",{attrs:{id:"四、复杂度分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、复杂度分析"}},[s._v("#")]),s._v(" "),t("strong",[s._v("四、复杂度分析")])]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("时间复杂度 O(N) ：")]),s._v(" 其中 N = n ，有个 for 循环，需遍历列表。")]),s._v(" "),t("li",[t("strong",[s._v("空间复杂度 O(N) ：")]),s._v(" 创造了长度为 N 的结果数组，需要使用 O(N)的额外空间。")])])])}),[],!1,null,null,null);n.default=e.exports}}]);