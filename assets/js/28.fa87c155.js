(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{415:function(t,s,n){"use strict";n.r(s);var a=n(54),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"leetcode-394、字符串解码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-394、字符串解码"}},[t._v("#")]),t._v(" LeetCode 394、字符串解码")]),t._v(" "),n("h2",{attrs:{id:"一、题目描述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、题目描述"}},[t._v("#")]),t._v(" 一、题目描述")]),t._v(" "),n("p",[t._v("给定一个经过编码的字符串，返回它解码后的字符串。")]),t._v(" "),n("p",[t._v("编码规则为: "),n("code",[t._v("k[encoded_string]")]),t._v("，表示其中方括号内部的 "),n("code",[t._v("encoded_string")]),t._v(" 正好重复 "),n("code",[t._v("k")]),t._v(" 次。注意 "),n("code",[t._v("k")]),t._v(" 保证为正整数。")]),t._v(" "),n("p",[t._v("你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。")]),t._v(" "),n("p",[t._v("此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 "),n("code",[t._v("k")]),t._v(" ，例如不会出现像 "),n("code",[t._v("3a")]),t._v(" 或 "),n("code",[t._v("2[4]")]),t._v(" 的输入。")]),t._v(" "),n("p",[n("strong",[t._v("示例 1：")])]),t._v(" "),n("div",{staticClass:"language-Plain extra-class"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[t._v('输入：s = "3[a]2[bc]"\n输出："aaabcbc"\n')])])]),n("p",[n("strong",[t._v("示例 2：")])]),t._v(" "),n("div",{staticClass:"language-Plain extra-class"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[t._v('输入：s = "3[a2[c]]"\n输出："accaccacc"\n')])])]),n("p",[n("strong",[t._v("示例 3：")])]),t._v(" "),n("div",{staticClass:"language-Plain extra-class"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[t._v('输入：s = "2[abc]3[cd]ef"\n输出："abcabccdcdcdef"\n')])])]),n("p",[n("strong",[t._v("示例 4：")])]),t._v(" "),n("div",{staticClass:"language-Plain extra-class"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[t._v('输入：s = "abc3[cd]xyz"\n输出："abccdcdcdxyz"\n')])])]),n("p",[n("strong",[t._v("提示：")])]),t._v(" "),n("ul",[n("li",[n("code",[t._v("1 <= s.length <= 30")])]),t._v(" "),n("li",[n("code",[t._v("s")]),t._v(" 由小写英文字母、数字和方括号 "),n("code",[t._v("'[]'")]),t._v(" 组成")]),t._v(" "),n("li",[n("code",[t._v("s")]),t._v(" 保证是一个 "),n("strong",[t._v("有效")]),t._v(" 的输入。")]),t._v(" "),n("li",[n("code",[t._v("s")]),t._v(" 中所有整数的取值范围为 "),n("code",[t._v("[1, 300]")])])]),t._v(" "),n("h2",{attrs:{id:"二、题目解析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、题目解析"}},[t._v("#")]),t._v(" 二、题目解析")]),t._v(" "),n("p",[t._v("注意示例 2 ，可以发现字符串中存在括号内有嵌套括号的情况，这个时候，只有先把内层括号解码成功，才能再去解码外层括号。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://superblog-1257126549.cos.ap-guangzhou.myqcloud.com/202306091130246.(null)",alt:"img"}})]),t._v(" "),n("p",[t._v("也就意味着"),n("strong",[t._v("后面访问的括号比前面访问的括号还更早的进行处理")]),t._v("，与栈的"),n("strong",[t._v("先入后出")]),t._v("特点对应。")]),t._v(" "),n("p",[t._v("所以，本题使用栈来处理。")]),t._v(" "),n("p",[t._v("具体操作如下：")]),t._v(" "),n("p",[t._v("1、构建两个栈，一个是数字栈 "),n("code",[t._v("numStack")]),t._v(" ，在遍历编码字符串过程中记录出现的数字；一个是字符串栈 "),n("code",[t._v("strStack")]),t._v(" ，在遍历编码字符串过程中记录出现的字符串。")]),t._v(" "),n("p",[t._v("2、初始化两个变量，一个是 "),n("code",[t._v("digit")]),t._v(" ，用来记录访问到字符串之前出现的数字；一个是 "),n("code",[t._v("res")]),t._v(" ，在访问编码字符串的过程中，把得到的结果存放到 "),n("code",[t._v("res")]),t._v(" 中。")]),t._v(" "),n("p",[t._v("3、接下来，开始从头到尾访问编码字符串，在访问过程中，字符会出现 "),n("code",[t._v("4")]),t._v(" 种情况。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://superblog-1257126549.cos.ap-guangzhou.myqcloud.com/202306091130818.(null)",alt:"img"}})]),t._v(" "),n("p",[t._v("4、如果是数字，需要把字符转成整型数字，然后更新到 "),n("code",[t._v("digit")]),t._v(" 上，代表后续的字符串需要重复 "),n("code",[t._v("digit")]),t._v(" 次。")]),t._v(" "),n("p",[t._v("5、如果是字符，说明它就出现一次，可以直接存放到 "),n("code",[t._v("res")]),t._v(" 中。")]),t._v(" "),n("p",[t._v("6、如果是"),n("code",[t._v('"["')]),t._v(" ，这个时候出现了嵌套的内层编码字符串，而外层的解码需要等待内层解码的结果，那么之前已经扫描的字符需要存放起来，等到内层解码之后再重新使用。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://superblog-1257126549.cos.ap-guangzhou.myqcloud.com/202306091130333.(null)",alt:"img"}})]),t._v(" "),n("p",[t._v("7、如果是"),n("code",[t._v('"]"')]),t._v(" ，此时，内层解码已经有结果，需要把它和前面的字符串进行拼接。")]),t._v(" "),n("p",[t._v("8、拼接的方式就是先通过 "),n("code",[t._v("numsStack")]),t._v(" 的栈顶元素获取重复的次数，再通过 "),n("code",[t._v("strStack")]),t._v(" 的栈顶元素获取前面的字符串。")]),t._v(" "),n("p",[t._v("9、最后返回 "),n("code",[t._v("res")]),t._v(" 就行。")]),t._v(" "),n("h2",{attrs:{id:"三、参考代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、参考代码"}},[t._v("#")]),t._v(" 三、参考代码")]),t._v(" "),n("h3",{attrs:{id:"_1、java-代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、java-代码"}},[t._v("#")]),t._v(" 1、Java 代码")]),t._v(" "),n("div",{staticClass:"language-Java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 登录 AlgoMooc 官网获取更多算法图解")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// https://www.algomooc.com")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 作者：程序员吴师兄")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码有看不懂的地方一定要私聊咨询吴师兄呀")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 字符串解码(LeetCode 394):https://leetcode.cn/problems/decode-string/")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("decodeString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        \n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建数字栈，在遍历编码字符串过程中记录出现的数字")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Deque")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" numStack "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedList")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建字符栈，在遍历编码字符串过程中记录出现的字符串")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Deque")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" strStack "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedList")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在访问编码字符串的过程中，用来记录访问到字符串之前出现的数字，一开始为 0")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" digit "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在访问编码字符串的过程中，把得到的结果存放到 res 中")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),t._v(" res "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从头到尾遍历编码字符串")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在遍历过程中，字符会出现 4 种情况")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 先获取此时访问的字符")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" ch "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("charAt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1、如果是数字，需要把字符转成整型数字")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注意数字不一定是 1 位，有可能是多位")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 比如  123a，在字母 a 的前面出现了 123，表示 a 重复出现 123 次")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 那么一开始 ch 为 1，当访问到 ch 为 2 的时候，1 和 2 要组成数字 12")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 再出现 3 ，12 和 3 组成数字 123")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Character")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isDigit")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ch"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 先将字符转成整型数字 ch-‘0’")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 补充知识：将字符'0'-'9'转换为数字，只需将字符变量减去'0'就行")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为字符和数字在内存里都是以 ASCII 码形式存储的")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 减去 '0' ，其实就是减去字符 '0' 的 ASCII 码，而字符 '0' 的 ASCII 码是 30")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所以减去'0'也就是减去30，然后就可以得到字符对应的数字了。")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ch "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 再将这个数字和前面存储的数字进行组合")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 和 2 组成数字 12，也就是 1 * 10 + 2 = 12")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 12 和 3 组成数字 123，也就是 12 * 10 + 3 = 123")]),t._v("\n                digit "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" digit "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" num "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2、如果是字符")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ch "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" ch "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'z'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 说明它就出现一次，可以直接存放到 res 中")]),t._v("\n                res"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ch"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 3、如果是"[" ')]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 出现了嵌套的内层编码字符串，而外层的解码需要等待内层解码的结果")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 那么之前已经扫描的字符需要存放起来，等到内层解码之后再重新使用")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ch "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'['")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把数字存放到数字栈")]),t._v("\n                numStack"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("digit"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把外层的解码字符串存放到字符串栈")]),t._v("\n                strStack"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 开始新的一轮解码")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 于是，digit 归零")]),t._v("\n                digit "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// res 重新初始化")]),t._v("\n                res "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 4、如果是"]" ')]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ch "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("']'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此时，内层解码已经有结果，需要把它和前面的字符串进行拼接")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第一步，先去查看内层解码的字符串需要被重复输出几次")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 比如 e3[abc]，比如内层解码结果 abc 需要输出 3 次")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过数字栈提取出次数")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" numStack"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("poll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第二步，通过字符串栈提取出之前的解码字符串")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),t._v(" outString "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" strStack"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("poll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第三步，不断的把内层解码的字符串拼接起来")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" count"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    \n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 拼接到 outString 后面，拼接 count 次")]),t._v("\n                    outString"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 再把此时得到的结果赋值给 res")]),t._v("\n                res "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" outString"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回解码成功的字符串")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"_2、c-代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、c-代码"}},[t._v("#")]),t._v(" 2、C++ 代码")]),t._v(" "),n("div",{staticClass:"language-C++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class Solution {\npublic:\n    string decodeString(string s) {\n        // 创建数字栈，在遍历编码字符串过程中记录出现的数字\n        stack<int> numStack;\n\n        // 创建字符栈，在遍历编码字符串过程中记录出现的字符串\n        stack <string> strStack;\n\n        // 在访问编码字符串的过程中，用来记录访问到字符串之前出现的数字，一开始为 0\n        int digit = 0;\n\n        // 在访问编码字符串的过程中，把得到的结果存放到 res 中\n        string res;\n\n        // 从头到尾遍历编码字符串\n        for (int i = 0; i < s.size(); i++) {\n\n            // 在遍历过程中，字符会出现 4 种情况\n\n            // 先获取此时访问的字符\n            char ch = s[i];\n            // 1、如果是数字，需要把字符转成整型数字\n            // 注意数字不一定是 1 位，有可能是多位\n            // 比如  123a，在字母 a 的前面出现了 123，表示 a 重复出现 123 次\n            // 那么一开始 ch 为 1，当访问到 ch 为 2 的时候，1 和 2 要组成数字 12\n            // 再出现 3 ，12 和 3 组成数字 123\n            if (ch>='0'&&ch<='9') {\n\n                // 先将字符转成整型数字 ch-‘0’\n                // 补充知识：将字符'0'-'9'转换为数字，只需将字符变量减去'0'就行\n                // 因为字符和数字在内存里都是以 ASCII 码形式存储的\n                // 减去 '0' ，其实就是减去字符 '0' 的 ASCII 码，而字符 '0' 的 ASCII 码是 30\n                // 所以减去'0'也就是减去30，然后就可以得到字符对应的数字了。\n                int num = ch - '0';\n\n                // 再将这个数字和前面存储的数字进行组合\n                // 1 和 2 组成数字 12，也就是 1 * 10 + 2 = 12\n                // 12 和 3 组成数字 123，也就是 12 * 10 + 3 = 123\n                digit = digit * 10 + num ;\n\n            // 2、如果是字符\n            }else if((ch >= 'a' && ch <= 'z') ){\n\n                // 说明它就出现一次，可以直接存放到 res 中\n                res += ch;\n\n            // 3、如果是\"[\" \n            // 出现了嵌套的内层编码字符串，而外层的解码需要等待内层解码的结果\n            // 那么之前已经扫描的字符需要存放起来，等到内层解码之后再重新使用\n            }else if (ch == '[') {\n\n                // 把数字存放到数字栈\n                numStack.push(digit);\n\n                // 把外层的解码字符串存放到字符串栈\n                strStack.push(res);\n\n                // 开始新的一轮解码\n                // 于是，digit 归零\n                digit = 0;\n\n                // res 重新初始化\n                res = \"\";\n\n            // 4、如果是\"]\" \n            }else if (ch == ']') {\n\n                // 此时，内层解码已经有结果，需要把它和前面的字符串进行拼接\n\n                // 第一步，先去查看内层解码的字符串需要被重复输出几次\n                // 比如 e3[abc]，比如内层解码结果 abc 需要输出 3 次\n                // 通过数字栈提取出次数\n                int count = numStack.top();\n\n                numStack.pop();\n\n                // 第二步，通过字符串栈提取出之前的解码字符串\n                string outString = strStack.top();\n\n                strStack.pop();\n\n                // 第三步，不断的把内层解码的字符串拼接起来\n                for (int j = 0; j < count; j++) {\n                    \n                    // 拼接到 outString 后面，拼接 count 次\n                    outString += res;\n                }\n\n                // 再把此时得到的结果赋值给 res\n                res = outString;\n            }\n        }\n\n        // 返回解码成功的字符串\n        return res;\n    }\n};\n")])])]),n("h3",{attrs:{id:"_3、python-代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、python-代码"}},[t._v("#")]),t._v(" 3、Python 代码")]),t._v(" "),n("div",{staticClass:"language-Python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("decodeString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建数字栈，在遍历编码字符串过程中记录出现的数字")]),t._v("\n        numStack "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建字符栈，在遍历编码字符串过程中记录出现的字符串")]),t._v("\n        strStack "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在访问编码字符串的过程中，用来记录访问到字符串之前出现的数字，一开始为 0")]),t._v("\n        digit "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在访问编码字符串的过程中，把得到的结果存放到 res 中")]),t._v("\n        res "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从头到尾遍历编码字符串")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" ch "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在遍历过程中，字符会出现 4 种情况")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 先获取此时访问的字符")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1、如果是数字，需要把字符转成整型数字")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 注意数字不一定是 1 位，有可能是多位")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 比如  123a，在字母 a 的前面出现了 123，表示 a 重复出现 123 次")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 那么一开始 ch 为 1，当访问到 ch 为 2 的时候，1 和 2 要组成数字 12")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 再出现 3 ，12 和 3 组成数字 123")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" ch "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'9'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 先将字符转成整型数字 ch-‘0’")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 补充知识：将字符'0'-'9'转换为数字，只需将字符变量减去'0'就行")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 因为字符和数字在内存里都是以 ASCII 码形式存储的")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 减去 '0' ，其实就是减去字符 '0' 的 ASCII 码，而字符 '0' 的 ASCII 码是 30")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 所以减去'0'也就是减去30，然后就可以得到字符对应的数字了。")]),t._v("\n                num "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ch"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 再将这个数字和前面存储的数字进行组合")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1 和 2 组成数字 12，也就是 1 * 10 + 2 = 12")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 12 和 3 组成数字 123，也就是 12 * 10 + 3 = 123")]),t._v("\n                digit "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" digit "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" num \n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2、如果是字符")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" ch "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" ch "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'z'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 说明它就出现一次，可以直接存放到 res 中")]),t._v("\n                res "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" ch\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 3、如果是"[" ')]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 出现了嵌套的内层编码字符串，而外层的解码需要等待内层解码的结果")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 那么之前已经扫描的字符需要存放起来，等到内层解码之后再重新使用")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" ch "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'['")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 把数字存放到数字栈")]),t._v("\n                numStack"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("digit"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 把外层的解码字符串存放到字符串栈")]),t._v("\n                strStack"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开始新的一轮解码")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 于是，digit 归零")]),t._v("\n                digit "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# res 重新初始化")]),t._v("\n                res "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 4、如果是"]" ')]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" ch "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("']'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 此时，内层解码已经有结果，需要把它和前面的字符串进行拼接")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第一步，先去查看内层解码的字符串需要被重复输出几次")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 比如 e3[abc]，比如内层解码结果 abc 需要输出 3 次")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过数字栈提取出次数")]),t._v("\n                count "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" numStack"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第二步，通过字符串栈提取出之前的解码字符串")]),t._v("\n                outString "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" strStack"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第三步，不断的把内层解码的字符串拼接起来")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("count"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 拼接到 outString 后面，拼接 count 次")]),t._v("\n                    outString "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" res\n            \n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 再把此时得到的结果赋值给 res")]),t._v("\n                res "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" outString\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回解码成功的字符串")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res\n")])])]),n("h2",{attrs:{id:"四、复杂度分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、复杂度分析"}},[t._v("#")]),t._v(" 四、复杂度分析")]),t._v(" "),n("ul",[n("li",[t._v("时间复杂度 "),n("code",[t._v("O(N)")]),t._v("，一次遍历 "),n("code",[t._v("s")])]),t._v(" "),n("li",[t._v("空间复杂度 "),n("code",[t._v("O(N)")]),t._v("，辅助栈在极端情况下需要线性空间。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);