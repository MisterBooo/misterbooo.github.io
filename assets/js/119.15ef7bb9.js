(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{507:function(t,n,s){"use strict";s.r(n);var a=s(54),e=Object(a.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"leetcode-560、和为-k-的子数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-560、和为-k-的子数组"}},[t._v("#")]),t._v(" LeetCode 560、和为 K 的子数组")]),t._v(" "),s("h2",{attrs:{id:"一、题目描述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、题目描述"}},[t._v("#")]),t._v(" 一、题目描述")]),t._v(" "),s("p",[t._v("给你一个整数数组 "),s("code",[t._v("nums")]),t._v(" 和一个整数 "),s("code",[t._v("k")]),t._v(" ，请你统计并返回 该数组中和为 "),s("code",[t._v("k")]),t._v(" 的子数组的个数 。")]),t._v(" "),s("p",[s("strong",[t._v("示例 1：")])]),t._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[t._v("输入：nums = [1,1,1], k = 2\n输出：2\n")])])]),s("p",[s("strong",[t._v("示例 2：")])]),t._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[t._v("输入：nums = [1,2,3], k = 3\n输出：2\n")])])]),s("p",[s("strong",[t._v("提示：")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("1 <= nums.length <= 2 * 10^4")])]),t._v(" "),s("li",[s("code",[t._v("-1000 <= nums[i] <= 1000")])]),t._v(" "),s("li",[s("code",[t._v("-10^7 <= k <= 10^7")])])]),t._v(" "),s("h2",{attrs:{id:"二、题目解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、题目解析"}},[t._v("#")]),t._v(" 二、题目解析")]),t._v(" "),s("p",[t._v("补充知识点"),s("strong",[t._v("前缀和")]),t._v("：前缀和指一个数组的某下标之前的所有数组元素的和（包含其自身）。")]),t._v(" "),s("p",[t._v("利用前缀和这种特点，可以快速的计算某个区间内的和，比如前 i 个元素的前缀和为 "),s("code",[t._v("preSum[i] = num[0] + nums[1] + ... + nums[i]")]),t._v(" ，而前 j 个元素的前缀和为 "),s("code",[t._v("preSum[j] = num[0] + nums[1] + ... + nums[j]")]),t._v(" 。")]),t._v(" "),s("p",[t._v("那么区间 "),s("strong",[t._v("[ i  , j ]")]),t._v(" 之间的"),s("strong",[t._v("子数组之和")]),t._v("就是 "),s("strong",[t._v("preSum[j] - preSum[i]")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://superblog-1257126549.cos.ap-guangzhou.myqcloud.com/202306100948677.(null)",alt:"img"}})]),t._v(" "),s("p",[t._v("基于这种思路，可以先遍历一次数组，求出前缀和数组。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://superblog-1257126549.cos.ap-guangzhou.myqcloud.com/202306100948197.(null)",alt:"img"}})]),t._v(" "),s("p",[t._v("题目这个时候就变成了"),s("strong",[t._v("需要寻找出多少个 i 和 j 的组合，使得 [ i , j ] 这个区间的和为 k")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[t._v("class Solution {\n    public int subarraySum(int[] nums, int k) {\n      \n        int len = nums.length;\n     \n        int[] preSum = new int[len + 1];\n      \n        preSum[0] = 0;\n        \n        for (int i = 0; i < len; i++) {\n            preSum[i + 1] = preSum[i] + nums[i];\n        }\n\n        int count = 0;\n          \n        for (int i = 0; i < len; i++) {\n          \n            for (int j = i; j < len; j++) {\n              \n                if (preSum[j + 1] - preSum[i] == k) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}\n")])])]),s("p",[t._v("在计算过程中，有两个 for 循环发生了嵌套，时间复杂度来到了 O(n^2) 级别。")]),t._v(" "),s("p",[s("strong",[t._v("需要优化")]),t._v("。")]),t._v(" "),s("p",[t._v("事实上，我们不需要去计算出"),s("strong",[t._v("具体")]),t._v("是哪两项的前缀和之差等于k，只需要知道"),s("strong",[t._v("等于 k 的前缀和之差出现的次数 count")]),t._v("，所以我们可以在遍历数组过程中，先去计算以 nums[i] 结尾的前缀和 pre，然后再去判断之前有没有存储 pre - k 这种前缀和，如果有，那么 pre - k 到 pre 这中间的元素和就是 k 了。")]),t._v(" "),s("p",[t._v("具体操作如下：")]),t._v(" "),s("p",[t._v("1、利用哈希表，以前缀和为键，出现次数为对应的值，记录 pre[i] 出现的次数。")]),t._v(" "),s("p",[t._v("2、开始从头到尾遍历 nums 数组，在遍历过程中，会执行两个操作。")]),t._v(" "),s("p",[t._v("3、存储索引为 i 的这个元素时，前缀和的值是多少，并且把这个值出现的频次存储到 mp 中。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://superblog-1257126549.cos.ap-guangzhou.myqcloud.com/202306100948562.(null)",alt:"img"}})]),t._v(" "),s("p",[t._v("4、判断之前有没有存储 pre - k 这种前缀和，如果有，说明 pre - k 到 pre 直接的那些元素值之和就是 k。")]),t._v(" "),s("p",[t._v("5、返回结果。")]),t._v(" "),s("h2",{attrs:{id:"三、参考代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、参考代码"}},[t._v("#")]),t._v(" 三、参考代码")]),t._v(" "),s("h3",{attrs:{id:"_1、java-代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、java-代码"}},[t._v("#")]),t._v(" 1、Java 代码")]),t._v(" "),s("div",{staticClass:"language-Java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 登录 AlgoMooc 官网获取更多算法图解")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// https://www.algomooc.com")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 作者：程序员吴师兄")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码有看不懂的地方一定要私聊咨询吴师兄呀")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 和为 K 的子数组（LeetCode 560）：https://leetcode.cn/problems/subarray-sum-equals-k/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("subarraySum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 统计和为 K 的子数组的数量")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录遍历到索引为 i 的这个元素时，前缀和的值是多少")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" pre "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 利用哈希表，以前缀和为键，出现次数为对应的值，记录 pre[i] 出现的次数 ")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" mp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一开始，需要设置前缀和为 0 时，出现的次数为 1 次")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这一行的作用就是为了应对 nums[0] +nums[1] + ... + nums[i] == k 这种情况")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如数组 [1, 2, 3, 6]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个数组的累加和数组为 [1, 3, 【6】, 12] ")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 k = 6, 假如 mp 中没有预先存储(0, 1) ")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 那么来到累加和为 6 的位置时，这时 mp 中存储的就只有两个数据 (1, 1), (3, 1)")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 想去判断 mp.containsKey(pre - k) , 这时 pre - k = 6 - 6 = 0")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 但 map 中没有 (0, 1) ，")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为这个时候忽略了从下标 0 累加到下标 i 等于 k 的情况")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 仅仅是统计了从下标大于 0 到某个位置等于 k 的所有答案")]),t._v("\n        mp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 开始从头到尾遍历 nums 数组，在遍历过程中，会执行两个操作")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1、存储索引为 i 的这个元素时，前缀和的值是多少，并且把这个值出现的频次存储到 mp 中")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2、判断之前有没有存储 pre - k 这种前缀和，如果有，说明 pre - k 到 pre 直接的那些元素值之和就是 k")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 存储索引为 i 的这个元素时，前缀和的值是多少")]),t._v("\n            pre "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断之前有没有存储 pre - k 这种前缀和")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("containsKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pre "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果有，说明 pre - k 到 pre 直接的那些元素值之和就是 k")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 找到了一组，累加到 count 上")]),t._v("\n                count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" mp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pre "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个值出现的频次存储到 mp 中")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// getOrDefault：当 Map 集合中有这个 key 时，就使用这个 key 对应的 value 值")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果没有就使用默认值 defaultValue")]),t._v("\n            mp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOrDefault")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回结果")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"_2、c-代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、c-代码"}},[t._v("#")]),t._v(" 2、C++ 代码")]),t._v(" "),s("div",{staticClass:"language-C++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Solution {\npublic:\n    int subarraySum(vector<int>& nums, int k) {\n\n        // 统计和为 K 的子数组的数量\n        int count = 0;\n        \n        // 记录遍历到索引为 i 的这个元素时，前缀和的值是多少\n        int pre = 0;\n\n        // 利用哈希表，以前缀和为键，出现次数为对应的值，记录 pre[i] 出现的次数 \n        unordered_map<int, int> mp;\n        \n        // 一开始，需要设置前缀和为 0 时，出现的次数为 1 次\n        // 这一行的作用就是为了应对 nums[0] +nums[1] + ... + nums[i] == k 这种情况\n        // 如数组 [1, 2, 3, 6]\n        // 这个数组的累加和数组为 [1, 3, 【6】, 12] \n        // 如果 k = 6, 假如 mp 中没有预先存储(0, 1) \n        // 那么来到累加和为 6 的位置时，这时 mp 中存储的就只有两个数据 (1, 1), (3, 1)\n        // 想去判断 mp.containsKey(pre - k) , 这时 pre - k = 6 - 6 = 0\n        // 但 map 中没有 (0, 1) ，\n        // 因为这个时候忽略了从下标 0 累加到下标 i 等于 k 的情况\n        // 仅仅是统计了从下标大于 0 到某个位置等于 k 的所有答案\n        mp[0] =  1;\n\n        // 开始从头到尾遍历 nums 数组，在遍历过程中，会执行两个操作\n        // 1、存储索引为 i 的这个元素时，前缀和的值是多少，并且把这个值出现的频次存储到 mp 中\n        // 2、判断之前有没有存储 pre - k 这种前缀和，如果有，说明 pre - k 到 pre 直接的那些元素值之和就是 k\n        for (int i = 0; i < nums.size(); i++) {\n\n            // 存储索引为 i 的这个元素时，前缀和的值是多少\n            pre += nums[i];\n\n            // 判断之前有没有存储 pre - k 这种前缀和\n            if (mp.find(pre - k) != mp.end()) {\n\n                // 如果有，说明 pre - k 到 pre 直接的那些元素值之和就是 k\n                // 找到了一组，累加到 count 上\n                count += mp[pre - k];\n\n            }\n\n            // 这个值出现的频次存储到 mp 中\n            mp[pre]++;\n        }\n\n        // 返回结果\n        return count;\n\n    }\n};\n")])])]),s("h3",{attrs:{id:"_3、python-代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、python-代码"}},[t._v("#")]),t._v(" 3、Python 代码")]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("subarraySum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" List"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 统计和为 K 的子数组的数量")]),t._v("\n        count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n        \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 记录遍历到索引为 i 的这个元素时，前缀和的值是多少")]),t._v("\n        pre "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 利用哈希表，以前缀和为键，出现次数为对应的值，记录 pre[i] 出现的次数 ")]),t._v("\n        mp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" collections"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("defaultdict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 一开始，需要设置前缀和为 0 时，出现的次数为 1 次")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这一行的作用就是为了应对 nums[0] +nums[1] + ... + nums[i] == k 这种情况")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如数组 [1, 2, 3, 6]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这个数组的累加和数组为 [1, 3, 【6】, 12] ")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果 k = 6, 假如 mp 中没有预先存储(0, 1) ")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 那么来到累加和为 6 的位置时，这时 mp 中存储的就只有两个数据 (1, 1), (3, 1)")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 想去判断 mp.containsKey(pre - k) , 这时 pre - k = 6 - 6 = 0")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 但 map 中没有 (0, 1) ，")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 因为这个时候忽略了从下标 0 累加到下标 i 等于 k 的情况")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 仅仅是统计了从下标大于 0 到某个位置等于 k 的所有答案")]),t._v("\n        mp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开始从头到尾遍历 nums 数组，在遍历过程中，会执行两个操作")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1、存储索引为 i 的这个元素时，前缀和的值是多少，并且把这个值出现的频次存储到 mp 中")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2、判断之前有没有存储 pre - k 这种前缀和，如果有，说明 pre - k 到 pre 直接的那些元素值之和就是 k")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 存储索引为 i 的这个元素时，前缀和的值是多少")]),t._v("\n            pre "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 判断之前有没有存储 pre - k 这种前缀和")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果有，说明 pre - k 到 pre 直接的那些元素值之和就是 k")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 找到了一组，累加到 count 上")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 利用 defaultdict 的特性，当 presum - k 不存在时，返回的是 0")]),t._v("\n            count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" mp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("pre "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n            \n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这个值出现的频次存储到 mp 中")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# getOrDefault：当 Map 集合中有这个 key 时，就使用这个 key 对应的 value 值")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果没有就使用默认值 defaultValue")]),t._v("\n            mp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("pre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回结果")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" count\n")])])]),s("h2",{attrs:{id:"四、复杂度分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、复杂度分析"}},[t._v("#")]),t._v(" 四、复杂度分析")]),t._v(" "),s("p",[t._v("时间复杂度：O(n)，其中 n 为数组的长度。我们遍历数组的时间复杂度为 O(n)，中间利用哈希表查询删除的复杂度均为 O(1)，因此总时间复杂度为 O(n)。")]),t._v(" "),s("p",[t._v("空间复杂度：O(n)，其中 n 为数组的长度。哈希表在最坏情况下可能有 n 个不同的键值，因此需要 O(n) 的空间复杂度。")])])}),[],!1,null,null,null);n.default=e.exports}}]);