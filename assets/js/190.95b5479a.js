(window.webpackJsonp=window.webpackJsonp||[]).push([[190],{577:function(s,t,a){"use strict";a.r(t);var n=a(54),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"leetcode-7、整数反转"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-7、整数反转"}},[s._v("#")]),s._v(" LeetCode 7、整数反转")]),s._v(" "),a("h2",{attrs:{id:"一、题目描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、题目描述"}},[s._v("#")]),s._v(" 一、题目描述")]),s._v(" "),a("p",[s._v("给你一个 32 位的有符号整数 "),a("code",[s._v("x")]),s._v(" ，返回将 "),a("code",[s._v("x")]),s._v(" 中的数字部分反转后的结果。")]),s._v(" "),a("p",[s._v("如果反转后整数超过 32 位的有符号整数的范围 "),a("code",[s._v("[−231, 231 − 1]")]),s._v(" ，就返回 0。")]),s._v(" "),a("p",[a("strong",[s._v("假设环境不允许存储 64 位整数（有符号或无符号）。")])]),s._v(" "),a("p",[a("strong",[s._v("示例 1：")])]),s._v(" "),a("div",{staticClass:"language-Plain extra-class"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v("输入：x = 123\n输出：321\n")])])]),a("p",[a("strong",[s._v("示例 2：")])]),s._v(" "),a("div",{staticClass:"language-Plain extra-class"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v("输入：x = -123\n输出：-321\n")])])]),a("p",[a("strong",[s._v("示例 3：")])]),s._v(" "),a("div",{staticClass:"language-Plain extra-class"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v("输入：x = 120\n输出：21\n")])])]),a("p",[a("strong",[s._v("示例 4：")])]),s._v(" "),a("div",{staticClass:"language-Plain extra-class"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v("输入：x = 0\n输出：0\n")])])]),a("p",[a("strong",[s._v("提示：")])]),s._v(" "),a("ul",[a("li",[a("code",[s._v("-2^31 <= x <= 2^31 - 1")])])]),s._v(" "),a("h2",{attrs:{id:"二、题目解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、题目解析"}},[s._v("#")]),s._v(" 二、题目解析")]),s._v(" "),a("h2",{attrs:{id:"三、参考代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、参考代码"}},[s._v("#")]),s._v(" 三、参考代码")]),s._v(" "),a("h3",{attrs:{id:"_1、java-代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、java-代码"}},[s._v("#")]),s._v(" 1、Java 代码")]),s._v(" "),a("div",{staticClass:"language-Java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 登录 AlgoMooc 官网获取更多算法图解")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// https://www.algomooc.com")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 作者：程序员吴师兄")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 微信：wzb_3377")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 代码有看不懂的地方一定要私聊咨询吴师兄呀")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 整数反转（LeetCode 7）：https://leetcode.cn/problems/reverse-integer/")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("reverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 记录反转成功之后的结果")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 对于需要反转的数字 x")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 每一次都按照【从后向前】的顺序去访问每个元素")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在访问过程中会执行一些逻辑判断")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 判断过程中可能会由于越界直接返回 0 ")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 否则会一直判断下去，直到 x 的每个元素均被访问，即 x = 0 时跳出循环")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 每一次都先获取末尾数字")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" lastNum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 假设有 1147483649 这个数字，它是小于最大的 32 位整数 2147483647 的")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 但是将这个数字反转过来后就变成了 9463847411 ，超过了最大的 32 位整数")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 根据题目要求需要返回 0")]),s._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在获取到 lastNum 的过程中，需要判断一下当前的 res 是否合法")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果不合法，就不用再添加 lastNum，结果直接返回 0 就行")]),s._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1、res 为正数并且大于了 214748364 ，即最小为 214748365 ，那么无论 lastNum 为多少，添加上去都会不合法")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 比如 lastNum 最小为 0 ，形成了 2147483650 ，也是大于 2147483647")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2、res 等于了 214748364 ，那么在它的后面添加 8、9，就会形成 2147483648 、2147483649 这两个数")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 而这两个数都不合法，返回 0")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("res "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("214748364")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("214748364")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("lastNum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" lastNum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 返回 0")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3、res 为负数并且小于了 -214748364 ，即最大为 214748365 ，那么无论 lastNum 为多少，添加上去都会不合法")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 比如 lastNum 最小为 9 ，形成了 -2147483650 ，也是小于 -2147483648")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 4、res 等于了 -214748364 ，那么在它的后面添加 9，就会形成 -2147483649 这个数")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 而这个数不合法，返回 0")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("res "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("214748364")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("res "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("214748364")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" lastNum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 返回 0")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 5、否则说明可以继续添加")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// res 全部元素向左移动，即 10")]),s._v("\n            res "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" res  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" lastNum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 6、在去获取 x 的下一个数")]),s._v("\n            x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 返回结果")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("h3",{attrs:{id:"_2、c-代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、c-代码"}},[s._v("#")]),s._v(" 2、C++ 代码")]),s._v(" "),a("div",{staticClass:"language-C++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Solution {\npublic:\n    int reverse(int x) {\n        // 记录反转成功之后的结果\n        int res = 0;\n\n        // 对于需要反转的数字 x\n        // 每一次都按照【从后向前】的顺序去访问每个元素\n        // 在访问过程中会执行一些逻辑判断\n        // 判断过程中可能会由于越界直接返回 0 \n        // 否则会一直判断下去，直到 x 的每个元素均被访问，即 x = 0 时跳出循环\n        while( x != 0 ) {\n\n            // 每一次都先获取末尾数字\n            int lastNum = x % 10;\n\n            // 假设有 1147483649 这个数字，它是小于最大的 32 位整数 2147483647 的\n            // 但是将这个数字反转过来后就变成了 9463847411 ，超过了最大的 32 位整数\n            // 根据题目要求需要返回 0\n\n            // 在获取到 lastNum 的过程中，需要判断一下当前的 res 是否合法\n            // 如果不合法，就不用再添加 lastNum，结果直接返回 0 就行\n\n            // 1、res 为正数并且大于了 214748364 ，即最小为 214748365 ，那么无论 lastNum 为多少，添加上去都会不合法\n            // 比如 lastNum 最小为 0 ，形成了 2147483650 ，也是大于 2147483647\n            // 2、res 等于了 214748364 ，那么在它的后面添加 8、9，就会形成 2147483648 、2147483649 这两个数\n            // 而这两个数都不合法，返回 0\n            if (res > 214748364 || ( res == 214748364 && (lastNum == 8 || lastNum == 9 ))) {\n                // 返回 0\n                return 0;\n\n            }\n            // 3、res 为负数并且小于了 -214748364 ，即最大为 214748365 ，那么无论 lastNum 为多少，添加上去都会不合法\n            // 比如 lastNum 最小为 9 ，形成了 -2147483650 ，也是小于 -2147483648\n            // 4、res 等于了 -214748364 ，那么在它的后面添加 9，就会形成 -2147483649 这个数\n            // 而这个数不合法，返回 0\n            if (res < -214748364 || (res == -214748364 && lastNum == -9 )) {\n                // 返回 0\n                return 0;\n\n            }\n\n            // 5、否则说明可以继续添加\n            // res 全部元素向左移动，即 10\n            res = res  10 + lastNum;\n\n            // 6、在去获取 x 的下一个数\n            x /= 10;\n\n        }\n\n        // 返回结果\n        return res;\n\n    }\n};\n")])])]),a("h3",{attrs:{id:"_3、python-代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、python-代码"}},[s._v("#")]),s._v(" 3、Python 代码")]),s._v(" "),a("div",{staticClass:"language-Python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("reverse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 记录反转成功之后的结果")]),s._v("\n        res "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 对于需要反转的数字 x")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 每一次都按照【从后向前】的顺序去访问每个元素")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在访问过程中会执行一些逻辑判断")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 判断过程中可能会由于越界直接返回 0 ")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 否则会一直判断下去，直到 x 的每个元素均被访问，即 x = 0 时跳出循环")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 每一次都先获取末尾数字")]),s._v("\n            lastNum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Python3 的取模运算在 x 为负数时也会返回 [0, 9) 以内的结果，因此这里需要进行特殊判断")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" lastNum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n               lastNum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 假设有 1147483649 这个数字，它是小于最大的 32 位整数 2147483647 的")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 但是将这个数字反转过来后就变成了 9463847411 ，超过了最大的 32 位整数")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 根据题目要求需要返回 0")]),s._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在获取到 lastNum 的过程中，需要判断一下当前的 res 是否合法")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果不合法，就不用再添加 lastNum，结果直接返回 0 就行")]),s._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1、res 为正数并且大于了 214748364 ，即最小为 214748365 ，那么无论 lastNum 为多少，添加上去都会不合法")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 比如 lastNum 最小为 0 ，形成了 2147483650 ，也是大于 2147483647")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2、res 等于了 214748364 ，那么在它的后面添加 8、9，就会形成 2147483648 、2147483649 这两个数")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 而这两个数都不合法，返回 0")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("214748364")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("or")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("214748364")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("lastNum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("or")]),s._v(" lastNum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 返回 0")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n\n            \n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 3、res 为负数并且小于了 -214748364 ，即最大为 214748365 ，那么无论 lastNum 为多少，添加上去都会不合法")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 比如 lastNum 最小为 9 ，形成了 -2147483650 ，也是小于 -2147483648")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 4、res 等于了 -214748364 ，那么在它的后面添加 9，就会形成 -2147483649 这个数")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 而这个数不合法，返回 0")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("214748364")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("or")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("res "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("214748364")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" lastNum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" \n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 返回 0")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n\n        \n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 5、否则说明可以继续添加")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# res 全部元素向左移动，即 10")]),s._v("\n            res "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" res  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" lastNum\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 6、在去获取 x 的下一个数")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Python3 的整数除法在 x 为负数时会向下（更小的负数）取整，因此不能写成 x //= 10")]),s._v("\n            x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" lastNum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 返回结果")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" res\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);