(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{484:function(t,s,a){"use strict";a.r(s);var n=a(54),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"leetcode-143、重排链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-143、重排链表"}},[t._v("#")]),t._v(" LeetCode 143、重排链表")]),t._v(" "),a("h2",{attrs:{id:"一、题目描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、题目描述"}},[t._v("#")]),t._v(" 一、题目描述")]),t._v(" "),a("p",[t._v("给定一个单链表 L：L0→L1→…→Ln-1→Ln ，")]),t._v(" "),a("p",[t._v("将其重新排列后变为：L0→Ln→L1→Ln-1→L2→Ln-2→…")]),t._v(" "),a("p",[t._v("你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。")]),t._v(" "),a("p",[a("strong",[t._v("示例1:")])]),t._v(" "),a("blockquote",[a("p",[t._v("给定链表 1->2->3->4->5, 重新排列为 1->5->2->4->3.")])]),t._v(" "),a("p",[a("strong",[t._v("示例2：")])]),t._v(" "),a("blockquote",[a("p",[t._v("给定链表 1->2->3->4, 重新排列为 1->4->2->3.")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://superblog-1257126549.cos.ap-guangzhou.myqcloud.com/202306101102134.(null)",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"二、题目解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、题目解析"}},[t._v("#")]),t._v(" 二、题目解析")]),t._v(" "),a("p",[t._v("这道题目很考察基本功和观察能力，最终的结果就是将"),a("strong",[t._v("原"),a("strong",[a("strong",[t._v("链表")])]),t._v("的前半部分和原链表的后半部分反转之后的链表进行合并得到的")]),t._v("。")]),t._v(" "),a("p",[t._v("所以，需要执行以下三个操作。")]),t._v(" "),a("ul",[a("li",[t._v("1、寻找出原链表的中点，把链表划分为两个区域")]),t._v(" "),a("li",[t._v("2、将右边的链表进行反转")]),t._v(" "),a("li",[t._v("3、把这两个区域进行交错合并")])]),t._v(" "),a("h3",{attrs:{id:"_1、使用快慢指针寻找链表中点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、使用快慢指针寻找链表中点"}},[t._v("#")]),t._v(" 1、使用快慢指针寻找链表中点")]),t._v(" "),a("p",[t._v("在链表的头节点设置两个指针 slow、fast，同时将它们向后移动。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://superblog-1257126549.cos.ap-guangzhou.myqcloud.com/202306101102540.(null)",alt:"img"}})]),t._v(" "),a("p",[t._v("每一次，slow 向后移动一步，fast 向后移动两步。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://superblog-1257126549.cos.ap-guangzhou.myqcloud.com/202306101102207.(null)",alt:"img"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://superblog-1257126549.cos.ap-guangzhou.myqcloud.com/202306101102526.(null)",alt:"img"}})]),t._v(" "),a("p",[t._v("于是，找到了中间节点 5，把链表划分为两个区域。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://superblog-1257126549.cos.ap-guangzhou.myqcloud.com/202306101102750.(null)",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"_2、将右边的链表进行反转"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、将右边的链表进行反转"}},[t._v("#")]),t._v(" 2、将右边的链表进行反转")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://superblog-1257126549.cos.ap-guangzhou.myqcloud.com/202306101102644.(null)",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"_3、把这两个区域进行交错合并"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、把这两个区域进行交错合并"}},[t._v("#")]),t._v(" 3、把这两个区域进行交错合并")]),t._v(" "),a("p",[t._v("属于归并排序的降维版本，这个操作不了解的话可以复习一下"),a("strong",[t._v("归并排序")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"三、参考代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、参考代码"}},[t._v("#")]),t._v(" 三、参考代码")]),t._v(" "),a("h3",{attrs:{id:"_1、java-代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、java-代码"}},[t._v("#")]),t._v(" 1、Java 代码")]),t._v(" "),a("div",{staticClass:"language-Python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 登录 AlgoMooc 官网获取更多算法图解\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" https"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v("www"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("algomooc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 作者：程序员吴师兄\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 代码有看不懂的地方一定要私聊咨询吴师兄呀\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 重排链表（LeetCode "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("143")]),t._v("）：https"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v("leetcode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cn"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("problems"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("reorder"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    public void reorderList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ListNode head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" a、寻找出原链表的中点，把链表划分为两个区域\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" b、将右边的链表进行反转\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" c、把这两个区域进行交错合并\n      \n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("、使用快慢指针寻找出链表的中点来 \n       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 对于 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 中间节点值为 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 所以左边区域为 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 右边区域为 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 但在视频讲解中，我把 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" 归为了右边区域，这是一个错误\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 虽然这个错误并不影响结果，因为合并过程都是一样的逻辑\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("\n        ListNode mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" middleNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("、基于 mid 这个中点，将链表划分为两个区域\n\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 左边的区域开头节点是 head\n        ListNode leftHead "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 右边的区域开头节点是 mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n        ListNode rightHead "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 将链表断开，就形成了两个链表了\n        mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" null"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("、将右边的链表进行反转\n        rightHead "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" reverseList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rightHead"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("、将这两个链表进行合并操作，即进行【交错拼接】\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" leftHead "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" null "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" rightHead "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" null"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 拼接过程如下\n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("、先记录左区域、右区域【接下来将有访问的两个节点】\n            ListNode leftHeadNext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" leftHead"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            ListNode rightHeadNext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rightHead"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("、左边连接右边的开头\n            leftHead"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rightHead"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("、leftHead 已经处理好，移动到下一个节点，即刚刚记录好的节点\n            leftHead "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" leftHeadNext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("、右边连接左边的开头\n            rightHead"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" leftHead"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("、rightHead 已经处理好，移动到下一个节点，即刚刚记录好的节点\n            rightHead "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rightHeadNext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            \n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" LeetCode "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("876")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 链表的中间节点\n    public ListNode middleNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ListNode head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        ListNode fast "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        ListNode slow "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fast "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" null "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" fast"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" null"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n            fast "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fast"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            slow "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" slow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" slow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" LeetCode "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("206")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 反转链表\n    public ListNode reverseList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ListNode head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 寻找递归终止条件\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("、head 指向的结点为 null \n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("、head 指向的结点的下一个结点为 null \n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 在这两种情况下，反转之后的结果还是它自己本身\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" head "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" null "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" null"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 不断的通过递归调用，直到无法递归下去，递归的最小粒度是在最后一个节点\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 因为到最后一个节点的时候，由于当前节点 head 的 "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" 节点是空，所以会直接返回 head\n        ListNode cur "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" reverseList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 比如原链表为 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 第一次执行下面代码的时候，head 为 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("，那么 head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 那么 head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" 就是 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" ，意思就是去设置 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" 的下一个节点\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 等号右侧为 head，意思就是设置 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" 的下一个节点是 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 这里出现了两个 "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 第一个 "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" 是「获取」 head 的下一节点\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 第二个 "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" 是「设置」 当前节点的下一节点为等号右侧的值\n        head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" head 原来的下一节点指向自己，所以 head 自己本身就不能再指向原来的下一节点了\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 否则会发生无限循环\n        head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" null"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 我们把每次反转后的结果传递给上一层\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"_2、c-代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、c-代码"}},[t._v("#")]),t._v(" 2、C++ 代码")]),t._v(" "),a("div",{staticClass:"language-C++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class Solution {\npublic:\n    void reorderList(ListNode*  head) {\n        // a、寻找出原链表的中点，把链表划分为两个区域\n        // b、将右边的链表进行反转\n        // c、把这两个区域进行交错合并\n      \n        // 1、使用快慢指针寻找出链表的中点来 \n        // ********\n        // 对于 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8\n        // 中间节点值为 5\n        // 所以左边区域为 1 -> 2 -> 3 -> 4 -> 5\n        // 右边区域为 6 -> 7 -> 8\n        // 但在视频讲解中，我把 5 归为了右边区域，这是一个错误\n        // 虽然这个错误并不影响结果，因为合并过程都是一样的逻辑\n        // ********\n        ListNode* mid = middleNode(head);\n\n        // 2、基于 mid 这个中点，将链表划分为两个区域\n\n        // 左边的区域开头节点是 head\n        ListNode* leftHead = head;\n\n        // 右边的区域开头节点是 mid->next\n        ListNode* rightHead = mid->next;\n\n        // 将链表断开，就形成了两个链表了\n        mid->next = nullptr;\n\n        // 3、将右边的链表进行反转\n        rightHead = reverseList(rightHead);\n\n        // 4、将这两个链表进行合并操作，即进行【交错拼接】\n        while( leftHead != nullptr && rightHead != nullptr){\n\n            // 拼接过程如下\n            // 5、先记录左区域、右区域【接下来将有访问的两个节点】\n            ListNode* leftHeadNext = leftHead->next;\n\n            ListNode* rightHeadNext = rightHead->next;\n\n            // 6、左边连接右边的开头\n            leftHead->next = rightHead;\n\n            // 7、leftHead 已经处理好，移动到下一个节点，即刚刚记录好的节点\n            leftHead = leftHeadNext;\n\n            // 8、右边连接左边的开头\n            rightHead->next = leftHead;\n\n            // 9、rightHead 已经处理好，移动到下一个节点，即刚刚记录好的节点\n            rightHead = rightHeadNext;\n            \n        }\n    }\n\n    \n\n    ListNode* middleNode(ListNode*  head) {\n        ListNode* slow = head;\n        ListNode* fast = head;\n        while (fast != nullptr && fast->next != nullptr) {\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        return slow;\n    }\n\n\npublic:\n    ListNode* reverseList(ListNode* head) {\n\n        // 寻找递归终止条件\n        // 1、head 指向的结点为 null \n        // 2、head 指向的结点的下一个结点为 null \n        // 在这两种情况下，反转之后的结果还是它自己本身\n        if( head == NULL || head->next == NULL)  return head;\n\n        // 不断的通过递归调用，直到无法递归下去，递归的最小粒度是在最后一个节点\n        // 因为到最后一个节点的时候，由于当前节点 head 的 next 节点是空，所以会直接返回 head\n        ListNode *cur = reverseList(head->next);\n\n        // 比如原链表为 1 --\x3e 2 --\x3e 3 --\x3e 4 --\x3e 5\n        // 第一次执行下面代码的时候，head 为 4，那么 head.next = 5\n        // 那么 head.next.next 就是 5.next ，意思就是去设置 5 的下一个节点\n        // 等号右侧为 head，意思就是设置 5 的下一个节点是 4\n\n        // 这里出现了两个 next\n        // 第一个 next 是「获取」 head 的下一节点\n        // 第二个 next 是「设置」 当前节点的下一节点为等号右侧的值\n        head->next->next = head;\n\n\n        // head 原来的下一节点指向自己，所以 head 自己本身就不能再指向原来的下一节点了\n        // 否则会发生无限循环\n        head->next = nullptr;\n\n        // 我们把每次反转后的结果传递给上一层\n        return cur;\n\n    }\n    \n};\n")])])]),a("h3",{attrs:{id:"_3、python-代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、python-代码"}},[t._v("#")]),t._v(" 3、Python 代码")]),t._v(" "),a("div",{staticClass:"language-Python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reorderList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ListNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# a、寻找出原链表的中点，把链表划分为两个区域")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# b、将右边的链表进行反转")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# c、把这两个区域进行交错合并")]),t._v("\n      \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1、使用快慢指针寻找出链表的中点来 ")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ********")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 对于 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 中间节点值为 5")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 所以左边区域为 1 -> 2 -> 3 -> 4 -> 5")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 右边区域为 6 -> 7 -> 8")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 但在视频讲解中，我把 5 归为了右边区域，这是一个错误")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 虽然这个错误并不影响结果，因为合并过程都是一样的逻辑")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ********")]),t._v("\n        mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("middleNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2、基于 mid 这个中点，将链表划分为两个区域")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 左边的区域开头节点是 head")]),t._v("\n        leftHead "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 右边的区域开头节点是 mid.next")]),t._v("\n        rightHead "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将链表断开，就形成了两个链表了")]),t._v("\n        mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3、将右边的链表进行反转")]),t._v("\n        rightHead "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reverseList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rightHead"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 4、将这两个链表进行合并操作，即进行【交错拼接】")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" leftHead "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" rightHead "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 拼接过程如下")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 5、先记录左区域、右区域【接下来将有访问的两个节点】")]),t._v("\n            leftHeadNext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" leftHead"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n\n            rightHeadNext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rightHead"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 6、左边连接右边的开头")]),t._v("\n            leftHead"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rightHead\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 7、leftHead 已经处理好，移动到下一个节点，即刚刚记录好的节点")]),t._v("\n            leftHead "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" leftHeadNext\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 8、右边连接左边的开头")]),t._v("\n            rightHead"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" leftHead\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 9、rightHead 已经处理好，移动到下一个节点，即刚刚记录好的节点")]),t._v("\n            rightHead "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rightHeadNext\n    \n\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("middleNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ListNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ListNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        slow "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fast "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" fast "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" fast"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            slow "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" slow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n            fast "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fast"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" slow\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reverseList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n        :type head: ListNode\n        :rtype: ListNode\n        """')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 寻找递归终止条件")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1、head 指向的结点为 null ")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2、head 指向的结点的下一个结点为 null ")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在这两种情况下，反转之后的结果还是它自己本身")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" head\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 不断的通过递归调用，直到无法递归下去，递归的最小粒度是在最后一个节点")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 因为到最后一个节点的时候，由于当前节点 head 的 next 节点是空，所以会直接返回 head")]),t._v("\n        cur "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reverseList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 比如原链表为 1 --\x3e 2 --\x3e 3 --\x3e 4 --\x3e 5")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第一次执行下面代码的时候，head 为 4，那么 head.next = 5")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 那么 head.next.next 就是 5.next ，意思就是去设置 5 的下一个节点")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 等号右侧为 head，意思就是设置 5 的下一个节点是 4")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这里出现了两个 next")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第一个 next 是「获取」 head 的下一节点")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第二个 next 是「设置」 当前节点的下一节点为等号右侧的值")]),t._v("\n        head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 原来的下一节点指向自己，所以 head 自己本身就不能再指向原来的下一节点了")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 否则会发生无限循环")]),t._v("\n        head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 我们把每次反转后的结果传递给上一层")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cur\n")])])]),a("h2",{attrs:{id:"四、复杂度分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、复杂度分析"}},[t._v("#")]),t._v(" 四、复杂度分析")]),t._v(" "),a("p",[t._v("**时间复杂度：**O(N)，其中 N 是链表中的节点数。")]),t._v(" "),a("p",[t._v("**空间复杂度：**O(1)。")])])}),[],!1,null,null,null);s.default=e.exports}}]);