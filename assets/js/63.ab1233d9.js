(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{450:function(t,s,n){"use strict";n.r(s);var a=n(54),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"leetcode-72、编辑距离"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-72、编辑距离"}},[t._v("#")]),t._v(" LeetCode 72、编辑距离")]),t._v(" "),n("h2",{attrs:{id:"一、题目描述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、题目描述"}},[t._v("#")]),t._v(" "),n("strong",[t._v("一、题目描述")])]),t._v(" "),n("p",[t._v("给你两个单词 word1 和 word2，请你计算出将 word1 转换成 word2 所使用的最少操作数 。")]),t._v(" "),n("p",[t._v("你可以对一个单词进行如下三种操作：")]),t._v(" "),n("ul",[n("li",[t._v("1、插入一个字符")]),t._v(" "),n("li",[t._v("2、删除一个字符")]),t._v(" "),n("li",[t._v("3、替换一个字符")])]),t._v(" "),n("h2",{attrs:{id:"二、题目解析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、题目解析"}},[t._v("#")]),t._v(" "),n("strong",[t._v("二、题目解析")])]),t._v(" "),n("h2",{attrs:{id:"三、参考代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、参考代码"}},[t._v("#")]),t._v(" "),n("strong",[t._v("三、参考代码")])]),t._v(" "),n("h3",{attrs:{id:"_1、java-代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、java-代码"}},[t._v("#")]),t._v(" "),n("strong",[t._v("1、Java 代码")])]),t._v(" "),n("div",{staticClass:"language-Java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("minDistance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" word1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" word2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        \n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取字符串 word1 的长度")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" L1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" word1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取字符串 word2 的长度")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" L2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" word2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置二维数组 dp 用来储存 word1 的前 i 个字符转换为 word2 的前 j 个字符最少操作数")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dp[0][0] 表示 word1 的前 0 个字符转换为 word2 的前 0 个字符最少操作数")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dp[0][j] 表示 word1 的前 0 个字符转换为 word2 的前 j 个字符最少操作数")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dp[i][0] 表示 word1 的前 i 个字符转换为 word2 的前 0 个字符最少操作数")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dp[i][j] 表示 word1 的前 i 个字符转换为 word2 的前 j 个字符最少操作数")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dp[L1][L2] 表示 word1 的前 L1 个字符转换为 word2 的前 L2 个字符最少操作数")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" dp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("L1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("L2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dp[i][0] 表示 word1 的前 i 个字符转换为 word2 的前 0 个字符最少操作数")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dp[i][0] 相当于给二维数组 dp 的第一列进行赋值操作")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只需要每次执行删除操作，就可以把 word1 的字符删除到 0 个字符")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" L1 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dp[1][0] 表示需要删除 1 次才能删除到 0 个字符")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dp[2][0] 表示需要删除 2 次才能删除到 2 个字符")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dp[i][0] 表示需要删除 i 次才能删除到 2 个字符")]),t._v("\n            dp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dp[0][j] 表示 word1 的前 0 个字符转换为 word2 的前 j 个字符最少操作数")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dp[0][j] 相当于给二维数组 dp 的第一行进行赋值操作")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只需要每次执行插入操作，就可以把 word1 的字符转行为 j 个字符")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" L2 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dp[0][1] 表示需要插入 1 次才能得到 1 个字符")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dp[0][2] 表示需要插入 2 次才能得到 2 个字符")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dp[0][j] 表示需要插入 j 次才能得到 j 个字符")]),t._v("\n            dp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过两个 for 循环，设置二维数组 dp 中的所有元素的值")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// i 从 word1 的第 1 个字符一直到 L1 个字符")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" L1 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// j 从 word2 的第 1 个字符一直到 L2 个字符")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" L2 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 二维数组 dp 的下标是从 (0,0) 开始的")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所以 dp[i][j] 表示的是 word1 中前 i 个字符即位置为 i - 1 的字符")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 转换为 word2 中前 j 个字符即位置为 j - 1 的字符所需要的最少操作数")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果此时 word1 中第 i - 1 个位置的字符（即当前遍历 i 时的字符）")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 与 word2 中第 j - 1 个位置的字符【相等】（即当前遍历 j 时的字符）")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 说明 word1 的前 i - 1 个字符转换为 word2 中前 j - 1 个字符成功后，")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// word1 的前 i 个字符也就成功转换为 word2 的前 j 个字符了")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("word1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("charAt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" word2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("charAt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dp[i][j] 表示 word1 的前 i 个字符转换为 word2 的前 j 个字符最少操作数")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dp[i - 1][j - 1] 表示 word1 的前 i - 1 个字符转换为 word2 的前 j -1 个字符最少操作数")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 比如 word1 为 abcd，word2 为 efgd")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此时 i = 4，j = 4")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 由于 word1.charAt(4 - 1) = d")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// word2.charAt(4 - 1) = d")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所以如果知道了 abc 转换为 efg 的最少操作数，那么结果也就出来了")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// d --\x3e d 不需要执行任何操作")]),t._v("\n                    dp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 否则，说明 word1 中第 i - 1 个位置的字符（即当前遍历 i 时的字符）")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 与 word2 中第 j - 1 个位置的字符【不相等】（即当前遍历 j 时的字符）")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    \n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 那么 dp[i][j]  可以从以下三种状态转换过来")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1、word1(L1-1) ——> word2(L2-1)")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2、word1(L1-1) ——> word2(L2)")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3、word1(L1) ——> word2(L2-1)")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// word1(L1-1) ——> word2(L2-1) 的最少操作数是 dp[i - 1][j - 1]")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// word1(L1-1) ——> word2(L2) 的最少操作数是 dp[i - 1][j]")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// word1(L1) ——> word2(L2-1) 的最少操作数是 dp[i][j - 1])")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 选这三种状态的较小值后，")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1、如果是 word1(L1-1) ——> word2(L2-1) 过来的，再执行 1 次替换操作")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2、如果是 word1(L1-1) ——> word2(L2)   过来的，再执行 1 次删除操作")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3、如果是 word1(L1) ——> word2(L2-1)   过来的，再执行 1 次插入操作")]),t._v("\n                    dp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Math")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Math")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("dp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dp[L1][L2] 表示 word1 的前 L1 个字符转换为 word2 的前 L2 个字符最少操作数")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把这个结果进行返回")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" dp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("L1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("L2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"_2、-c-代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、-c-代码"}},[t._v("#")]),t._v(" **2、**"),n("strong",[t._v("C++")]),t._v(" "),n("strong",[t._v("代码")])]),t._v(" "),n("div",{staticClass:"language-C++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class Solution {\npublic:\n    int minDistance(string word1, string word2) {\n\n        // 获取字符串 word1 的长度\n        int L1 = word1.length();\n\n        // 获取字符串 word2 的长度\n        int L2 = word2.length();\n\n        // 设置二维数组 dp 用来储存 word1 的前 i 个字符转换为 word2 的前 j 个字符最少操作数\n        // dp[0][0] 表示 word1 的前 0 个字符转换为 word2 的前 0 个字符最少操作数\n        // dp[0][j] 表示 word1 的前 0 个字符转换为 word2 的前 j 个字符最少操作数\n        // dp[i][0] 表示 word1 的前 i 个字符转换为 word2 的前 0 个字符最少操作数\n        // dp[i][j] 表示 word1 的前 i 个字符转换为 word2 的前 j 个字符最少操作数\n        // dp[L1][L2] 表示 word1 的前 L1 个字符转换为 word2 的前 L2 个字符最少操作数\n        auto dp = vector< vector <int> > ( L1 + 1,vector <int> ( L2 + 1 ));\n\n        // dp[i][0] 表示 word1 的前 i 个字符转换为 word2 的前 0 个字符最少操作数\n        // dp[i][0] 相当于给二维数组 dp 的第一列进行赋值操作\n        // 只需要每次执行删除操作，就可以把 word1 的字符删除到 0 个字符\n        for(int i = 0 ; i <= L1 ; i++){\n            // dp[1][0] 表示需要删除 1 次才能删除到 0 个字符\n            // dp[2][0] 表示需要删除 2 次才能删除到 2 个字符\n            // dp[i][0] 表示需要删除 i 次才能删除到 2 个字符\n            dp[i][0] = i;\n        }\n\n        // dp[0][j] 表示 word1 的前 0 个字符转换为 word2 的前 j 个字符最少操作数\n        // dp[0][j] 相当于给二维数组 dp 的第一行进行赋值操作\n        // 只需要每次执行插入操作，就可以把 word1 的字符转行为 j 个字符\n        for(int j = 0 ;j <= L2 ; j++){\n            // dp[0][1] 表示需要插入 1 次才能得到 1 个字符\n            // dp[0][2] 表示需要插入 2 次才能得到 2 个字符\n            // dp[0][j] 表示需要插入 j 次才能得到 j 个字符\n            dp[0][j] = j;\n        }\n\n\n        // 通过两个 for 循环，设置二维数组 dp 中的所有元素的值\n        // i 从 word1 的第 1 个字符一直到 L1 个字符\n        for(int i = 1 ; i <= L1 ; i++){\n\n            // j 从 word2 的第 1 个字符一直到 L2 个字符\n            for(int j = 1 ; j <= L2 ; j++){\n\n                // 二维数组 dp 的下标是从 (0,0) 开始的\n                // 所以 dp[i][j] 表示的是 word1 中前 i 个字符即位置为 i - 1 的字符\n                // 转换为 word2 中前 j 个字符即位置为 j - 1 的字符所需要的最少操作数\n                // 如果此时 word1 中第 i - 1 个位置的字符（即当前遍历 i 时的字符）\n                // 与 word2 中第 j - 1 个位置的字符【相等】（即当前遍历 j 时的字符）\n                // 说明 word1 的前 i - 1 个字符转换为 word2 中前 j - 1 个字符成功后，\n                // word1 的前 i 个字符也就成功转换为 word2 的前 j 个字符了\n                if(word1[i - 1] == word2[j - 1]){\n                    // dp[i][j] 表示 word1 的前 i 个字符转换为 word2 的前 j 个字符最少操作数\n                    // dp[i - 1][j - 1] 表示 word1 的前 i - 1 个字符转换为 word2 的前 j -1 个字符最少操作数\n                    // 比如 word1 为 abcd，word2 为 efgd\n                    // 此时 i = 4，j = 4\n                    // 由于 word1.charAt(4 - 1) = d\n                    // word2.charAt(4 - 1) = d\n                    // 所以如果知道了 abc 转换为 efg 的最少操作数，那么结果也就出来了\n                    // d --\x3e d 不需要执行任何操作\n                    dp[i][j] = dp[i - 1][j - 1];\n\n                    // 否则，说明 word1 中第 i - 1 个位置的字符（即当前遍历 i 时的字符）\n                    // 与 word2 中第 j - 1 个位置的字符【不相等】（即当前遍历 j 时的字符）\n                }else{\n                    \n                    // 那么 dp[i][j]  可以从以下三种状态转换过来\n                    // 1、word1(L1-1) ——> word2(L2-1)\n                    // 2、word1(L1-1) ——> word2(L2)\n                    // 3、word1(L1) ——> word2(L2-1)\n                    // word1(L1-1) ——> word2(L2-1) 的最少操作数是 dp[i - 1][j - 1]\n                    // word1(L1-1) ——> word2(L2) 的最少操作数是 dp[i - 1][j]\n                    // word1(L1) ——> word2(L2-1) 的最少操作数是 dp[i][j - 1])\n                    // 选这三种状态的较小值后，\n                    // 1、如果是 word1(L1-1) ——> word2(L2-1) 过来的，再执行 1 次替换操作\n                    // 2、如果是 word1(L1-1) ——> word2(L2)   过来的，再执行 1 次删除操作\n                    // 3、如果是 word1(L1) ——> word2(L2-1)   过来的，再执行 1 次插入操作\n                    dp[i][j] = min(dp[i - 1][j - 1],min(dp[i - 1][j],dp[i][j - 1])) + 1;\n                }\n            }\n        }\n        // dp[L1][L2] 表示 word1 的前 L1 个字符转换为 word2 的前 L2 个字符最少操作数\n        // 把这个结果进行返回\n        return dp[L1][L2];\n    }\n};\n")])])]),n("h3",{attrs:{id:"_3、python-代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、python-代码"}},[t._v("#")]),t._v(" "),n("strong",[t._v("3、Python 代码")])]),t._v(" "),n("div",{staticClass:"language-Python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("minDistance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" word1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" word2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取字符串 word1 的长度")]),t._v("\n        L1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("word1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取字符串 word2 的长度")]),t._v("\n        L2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("word2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置二维数组 dp 用来储存 word1 的前 i 个字符转换为 word2 的前 j 个字符最少操作数")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# dp[0][0] 表示 word1 的前 0 个字符转换为 word2 的前 0 个字符最少操作数")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# dp[0][j] 表示 word1 的前 0 个字符转换为 word2 的前 j 个字符最少操作数")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# dp[i][0] 表示 word1 的前 i 个字符转换为 word2 的前 0 个字符最少操作数")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# dp[i][j] 表示 word1 的前 i 个字符转换为 word2 的前 j 个字符最少操作数")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# dp[L1][L2] 表示 word1 的前 L1 个字符转换为 word2 的前 L2 个字符最少操作数")]),t._v("\n        dp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("L2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" L1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# dp[i][0] 表示 word1 的前 i 个字符转换为 word2 的前 0 个字符最少操作数")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# dp[i][0] 相当于给二维数组 dp 的第一列进行赋值操作")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只需要每次执行删除操作，就可以把 word1 的字符删除到 0 个字符")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("L1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# dp[1][0] 表示需要删除 1 次才能删除到 0 个字符")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# dp[2][0] 表示需要删除 2 次才能删除到 2 个字符")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# dp[i][0] 表示需要删除 i 次才能删除到 2 个字符")]),t._v("\n            dp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i\n        \n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# dp[0][j] 表示 word1 的前 0 个字符转换为 word2 的前 j 个字符最少操作数")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# dp[0][j] 相当于给二维数组 dp 的第一行进行赋值操作")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只需要每次执行插入操作，就可以把 word1 的字符转行为 j 个字符")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" L2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# dp[0][1] 表示需要插入 1 次才能得到 1 个字符")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# dp[0][2] 表示需要插入 2 次才能得到 2 个字符")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# dp[0][j] 表示需要插入 j 次才能得到 j 个字符")]),t._v("\n            dp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" j\n        \n\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过两个 for 循环，设置二维数组 dp 中的所有元素的值")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# i 从 word1 的第 1 个字符一直到 L1 个字符")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" L1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# j 从 word2 的第 1 个字符一直到 L2 个字符")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" L2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 二维数组 dp 的下标是从 (0,0) 开始的")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 所以 dp[i][j] 表示的是 word1 中前 i 个字符即位置为 i - 1 的字符")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 转换为 word2 中前 j 个字符即位置为 j - 1 的字符所需要的最少操作数")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果此时 word1 中第 i - 1 个位置的字符（即当前遍历 i 时的字符）")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 与 word2 中第 j - 1 个位置的字符【相等】（即当前遍历 j 时的字符）")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 说明 word1 的前 i - 1 个字符转换为 word2 中前 j - 1 个字符成功后，")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# word1 的前 i 个字符也就成功转换为 word2 的前 j 个字符了")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" word1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" word2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# dp[i][j] 表示 word1 的前 i 个字符转换为 word2 的前 j 个字符最少操作数")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# dp[i - 1][j - 1] 表示 word1 的前 i - 1 个字符转换为 word2 的前 j -1 个字符最少操作数")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 比如 word1 为 abcd，word2 为 efgd")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 此时 i = 4，j = 4")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 由于 word1.charAt(4 - 1) = d")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# word2.charAt(4 - 1) = d")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 所以如果知道了 abc 转换为 efg 的最少操作数，那么结果也就出来了")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# d --\x3e d 不需要执行任何操作")]),t._v("\n                    dp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 否则，说明 word1 中第 i - 1 个位置的字符（即当前遍历 i 时的字符）")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 与 word2 中第 j - 1 个位置的字符【不相等】（即当前遍历 j 时的字符）")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    \n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 那么 dp[i][j]  可以从以下三种状态转换过来")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1、word1(L1-1) ——> word2(L2-1)")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2、word1(L1-1) ——> word2(L2)")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3、word1(L1) ——> word2(L2-1)")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# word1(L1-1) ——> word2(L2-1) 的最少操作数是 dp[i - 1][j - 1]")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# word1(L1-1) ——> word2(L2) 的最少操作数是 dp[i - 1][j]")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# word1(L1) ——> word2(L2-1) 的最少操作数是 dp[i][j - 1])")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 选这三种状态的较小值后，")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1、如果是 word1(L1-1) ——> word2(L2-1) 过来的，再执行 1 次替换操作")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2、如果是 word1(L1-1) ——> word2(L2)   过来的，再执行 1 次删除操作")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3、如果是 word1(L1) ——> word2(L2-1)   过来的，再执行 1 次插入操作")]),t._v("\n                    dp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("min")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("min")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("dp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    \n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# dp[L1][L2] 表示 word1 的前 L1 个字符转换为 word2 的前 L2 个字符最少操作数")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 把这个结果进行返回")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" dp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("L1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("L2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);