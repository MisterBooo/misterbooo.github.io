(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{420:function(t,n,s){"use strict";s.r(n);var a=s(54),e=Object(a.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"leetcode-328、奇偶链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-328、奇偶链表"}},[t._v("#")]),t._v(" LeetCode 328、奇偶链表")]),t._v(" "),s("h2",{attrs:{id:"一、题目描述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、题目描述"}},[t._v("#")]),t._v(" "),s("strong",[t._v("一、题目描述")])]),t._v(" "),s("p",[t._v("给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。")]),t._v(" "),s("p",[t._v("请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。")]),t._v(" "),s("p",[s("strong",[t._v("示例 1:")])]),t._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[t._v("输入: 1->2->3->4->5->NULL\n输出: 1->3->5->2->4->NULL\n")])])]),s("p",[s("strong",[t._v("示例 2:")])]),t._v(" "),s("div",{staticClass:"language-Plain extra-class"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[t._v("输入: 2->1->3->5->6->4->7->NULL \n输出: 2->3->6->7->1->5->4->NULL\n")])])]),s("p",[s("strong",[t._v("说明:")])]),t._v(" "),s("ul",[s("li",[t._v("应当保持奇数节点和偶数节点的相对顺序。")]),t._v(" "),s("li",[t._v("链表的第一个节点视为奇数节点，第二个节点视为偶数节点，以此类推。")])]),t._v(" "),s("h2",{attrs:{id:"二、题目解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、题目解析"}},[t._v("#")]),t._v(" "),s("strong",[t._v("二、题目解析")])]),t._v(" "),s("h2",{attrs:{id:"三、参考代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、参考代码"}},[t._v("#")]),t._v(" "),s("strong",[t._v("三、参考代码")])]),t._v(" "),s("h3",{attrs:{id:"_1、java-代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、java-代码"}},[t._v("#")]),t._v(" "),s("strong",[t._v("1、Java 代码")])]),t._v(" "),s("div",{staticClass:"language-Java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 登录 AlgoMooc 官网获取更多算法图解")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// https://www.algomooc.com")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 作者：程序员吴师兄")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码有看不懂的地方一定要私聊咨询吴师兄呀")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 奇偶链表（ LeetCode 328 ）:https://leetcode-cn.com/problems/odd-even-linked-list/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("oddEvenList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 边界情况处理，如果链表为空或者只有一个节点，返回 head 就行")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("head "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置一个指针，指向链表的头节点，odd 代表奇数节点的头节点")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" odd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置一个指针，指向链表的头节点的下一个节点，even 代表偶数节点的头节点")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" even "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置一个指针，指向偶数节点的头节点，最终让奇数节点的尾节点的 next 指针指向它")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListNode")]),t._v(" evenHead "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" even"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从偶数链表的头节点开始向后遍历")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果当前节点为空，或者后一节点为空，那么说明整个链表已经查看完毕，不需要再遍历了")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("even "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" even"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 原先奇数节点的下一个节点是偶数节点，即 even 这个节点")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据数学知识，奇数后面一定是偶数，偶数后面一定是奇数")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 那么 even.next 节点必然是奇数节点")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所以让 odd 这个奇数节点的 next 指针指向 even.next 这个奇数节点")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这样，odd 上面都是奇数")]),t._v("\n            odd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" even"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 让 odd 移动到最新的由奇数节点组成的链表的尾部位置")]),t._v("\n            odd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" odd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个时候，odd.next 必然是偶数节点")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所以让 even 这个偶数节点的 next 指针指向 odd.next 这个偶数节点")]),t._v("\n            even"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" odd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 让 even 移动到最新的由偶数节点组成的链表的尾部位置")]),t._v("\n            even "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" even"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此时，原链表所有的节点已经遍历完毕")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// odd 上都是奇数节点")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// even 都是偶数节点")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据题目要求，奇数节点都在偶数节点之前")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所以让此时右奇数节点组成的链表的尾部的 next 指针指向由偶数节点组成的链表的头部")]),t._v("\n        odd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" evenHead"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最后返回原链表的头部节点就可以了")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 链表的头部节点没有发生过变化，因为它是奇数节点，并且是第一个奇数节点")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"_2、-c-代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、-c-代码"}},[t._v("#")]),t._v(" **2、**"),s("strong",[t._v("C++")]),t._v(" "),s("strong",[t._v("代码")])]),t._v(" "),s("div",{staticClass:"language-C++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 登录 AlgoMooc 官网获取更多算法图解\n// https://www.algomooc.com\n// 作者：程序员吴师兄\n// 代码有看不懂的地方一定要私聊咨询吴师兄呀\n// 奇偶链表（ LeetCode 328 ）:https://leetcode-cn.com/problems/odd-even-linked-list/\nclass Solution {\npublic:\n    ListNode* oddEvenList(ListNode* head) {\n        // 边界情况处理，如果链表为空或者只有一个节点，返回 head 就行\n        if(head == NULL || head->next == NULL ) return head;\n\n        // 设置一个指针，指向链表的头节点，odd 代表奇数节点的头节点\n        ListNode* odd = head;\n\n        // 设置一个指针，指向链表的头节点的下一个节点，even 代表偶数节点的头节点\n        ListNode* even = head->next; \n\n        // 设置一个指针，指向偶数节点的头节点，最终让奇数节点的尾节点的 next 指针指向它\n        ListNode* evenHead = even;\n        \n        // 从偶数链表的头节点开始向后遍历\n        // 如果当前节点为空，或者后一节点为空，那么说明整个链表已经查看完毕，不需要再遍历了\n        while(even != NULL && even->next != NULL){\n            // 原先奇数节点的下一个节点是偶数节点，即 even 这个节点\n            // 根据数学知识，奇数后面一定是偶数，偶数后面一定是奇数\n            // 那么 even->next 节点必然是奇数节点\n            // 所以让 odd 这个奇数节点的 next 指针指向 even->next 这个奇数节点\n            // 这样，odd 上面都是奇数\n            odd->next = even->next;\n            // 让 odd 移动到最新的由奇数节点组成的链表的尾部位置\n            odd = odd->next;\n\n            // 这个时候，odd->next 必然是偶数节点\n            // 所以让 even 这个偶数节点的 next 指针指向 odd->next 这个偶数节点\n            even->next = odd->next;\n            // 让 even 移动到最新的由偶数节点组成的链表的尾部位置\n            even = even->next;\n        }\n\n        // 此时，原链表所有的节点已经遍历完毕\n        // odd 上都是奇数节点\n        // even 都是偶数节点\n        // 根据题目要求，奇数节点都在偶数节点之前\n        // 所以让此时右奇数节点组成的链表的尾部的 next 指针指向由偶数节点组成的链表的头部\n        odd->next = evenHead;\n\n        // 最后返回原链表的头部节点就可以了\n        // 链表的头部节点没有发生过变化，因为它是奇数节点，并且是第一个奇数节点\n        return head;\n    }\n};\n")])])]),s("h3",{attrs:{id:"_3、python-代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、python-代码"}},[t._v("#")]),t._v(" "),s("strong",[t._v("3、Python 代码")])]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("oddEvenList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ListNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ListNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 边界情况处理，如果链表为空或者只有一个节点，返回 head 就行")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" head "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n           "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" head\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置一个指针，指向链表的头节点，odd 代表奇数节点的头节点")]),t._v("\n        odd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置一个指针，指向链表的头节点的下一个节点，even 代表偶数节点的头节点")]),t._v("\n        even "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" \n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置一个指针，指向偶数节点的头节点，最终让奇数节点的尾节点的 next 指针指向它")]),t._v("\n        evenHead "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" even\n        \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从偶数链表的头节点开始向后遍历")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果当前节点为空，或者后一节点为空，那么说明整个链表已经查看完毕，不需要再遍历了")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" even "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" even"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 原先奇数节点的下一个节点是偶数节点，即 even 这个节点")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 根据数学知识，奇数后面一定是偶数，偶数后面一定是奇数")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 那么 even.next 节点必然是奇数节点")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 所以让 odd 这个奇数节点的 next 指针指向 even.next 这个奇数节点")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这样，odd 上面都是奇数")]),t._v("\n            odd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" even"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 让 odd 移动到最新的由奇数节点组成的链表的尾部位置")]),t._v("\n            odd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" odd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这个时候，odd.next 必然是偶数节点")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 所以让 even 这个偶数节点的 next 指针指向 odd.next 这个偶数节点")]),t._v("\n            even"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" odd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 让 even 移动到最新的由偶数节点组成的链表的尾部位置")]),t._v("\n            even "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" even"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v("\n        \n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 此时，原链表所有的节点已经遍历完毕")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# odd 上都是奇数节点")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# even 都是偶数节点")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 根据题目要求，奇数节点都在偶数节点之前")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 所以让此时右奇数节点组成的链表的尾部的 next 指针指向由偶数节点组成的链表的头部")]),t._v("\n        odd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" evenHead\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 最后返回原链表的头部节点就可以了")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 链表的头部节点没有发生过变化，因为它是奇数节点，并且是第一个奇数节点")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" head\n")])])]),s("h2",{attrs:{id:"四、复杂度分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、复杂度分析"}},[t._v("#")]),t._v(" "),s("strong",[t._v("四、复杂度分析")])]),t._v(" "),s("p",[t._v("时间复杂度：O(n)，其中 n 是链表的节点数。需要遍历链表中的每个节点，并更新指针。")]),t._v(" "),s("p",[t._v("空间复杂度：O(1)。只需要维护有限的指针。")])])}),[],!1,null,null,null);n.default=e.exports}}]);