(window.webpackJsonp=window.webpackJsonp||[]).push([[151],{536:function(s,t,n){"use strict";n.r(t);var a=n(54),e=Object(a.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"leetcode-4、寻找两个正序数组的中位数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-4、寻找两个正序数组的中位数"}},[s._v("#")]),s._v(" LeetCode 4、寻找两个正序数组的中位数")]),s._v(" "),n("h2",{attrs:{id:"一、题目描述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、题目描述"}},[s._v("#")]),s._v(" "),n("strong",[s._v("一、题目描述")])]),s._v(" "),n("p",[s._v("给定两个大小分别为 "),n("code",[s._v("m")]),s._v(" 和 "),n("code",[s._v("n")]),s._v(" 的正序（从小到大）数组 "),n("code",[s._v("nums1")]),s._v(" 和 "),n("code",[s._v("nums2")]),s._v("。请你找出并返回这两个正序数组的 "),n("strong",[s._v("中位数")]),s._v(" 。")]),s._v(" "),n("p",[s._v("算法的时间复杂度应该为 "),n("code",[s._v("O(log (m+n))")]),s._v(" 。")]),s._v(" "),n("p",[n("strong",[s._v("示例 1：")])]),s._v(" "),n("div",{staticClass:"language-Plain extra-class"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[s._v("输入：nums1 = [1,3], nums2 = [2]\n输出：2.00000\n解释：合并数组 = [1,2,3] ，中位数 2\n")])])]),n("p",[n("strong",[s._v("示例 2：")])]),s._v(" "),n("div",{staticClass:"language-Plain extra-class"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[s._v("输入：nums1 = [1,2], nums2 = [3,4]\n输出：2.50000\n解释：合并数组 = [1,2,3,4] ，中位数 (2 + 3) / 2 = 2.5\n")])])]),n("p",[n("strong",[s._v("示例 3：")])]),s._v(" "),n("div",{staticClass:"language-Plain extra-class"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[s._v("输入：nums1 = [0,0], nums2 = [0,0]\n输出：0.00000\n")])])]),n("p",[n("strong",[s._v("示例 4：")])]),s._v(" "),n("div",{staticClass:"language-Plain extra-class"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[s._v("输入：nums1 = [], nums2 = [1]\n输出：1.00000\n")])])]),n("p",[n("strong",[s._v("示例 5：")])]),s._v(" "),n("div",{staticClass:"language-Plain extra-class"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[s._v("输入：nums1 = [2], nums2 = []\n输出：2.00000\n")])])]),n("p",[n("strong",[s._v("提示：")])]),s._v(" "),n("ul",[n("li",[n("code",[s._v("nums1.length == m")])]),s._v(" "),n("li",[n("code",[s._v("nums2.length == n")])]),s._v(" "),n("li",[n("code",[s._v("0 <= m <= 1000")])]),s._v(" "),n("li",[n("code",[s._v("0 <= n <= 1000")])]),s._v(" "),n("li",[n("code",[s._v("1 <= m + n <= 2000")])]),s._v(" "),n("li",[n("code",[s._v("-10^6 <= nums1[i], nums2[i] <= 10^6")])])]),s._v(" "),n("h2",{attrs:{id:"二、题目解析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、题目解析"}},[s._v("#")]),s._v(" "),n("strong",[s._v("二、题目解析")])]),s._v(" "),n("h2",{attrs:{id:"三、参考代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、参考代码"}},[s._v("#")]),s._v(" "),n("strong",[s._v("三、参考代码")])]),s._v(" "),n("h3",{attrs:{id:"_1、java-代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、java-代码"}},[s._v("#")]),s._v(" "),n("strong",[s._v("1、Java 代码")])]),s._v(" "),n("div",{staticClass:"language-Java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 登录 AlgoMooc 官网获取更多算法图解")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// https://www.algomooc.com")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 作者：程序员吴师兄")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 代码有看不懂的地方一定要私聊咨询吴师兄呀")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 寻找两个正序数组的中位数(4):https://leetcode-cn.com/problems/median-of-two-sorted-arrays/submissions/")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("findMedianSortedArrays")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" nums1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" nums2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 中位数的概念：将一个集合划分为两个长度相等的子集，其中一个子集中的元素总是大于另一个子集中的元素")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 由于数组的长度有两种情况：奇数、偶数")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 奇数组: [2 3 5] 对应的中位数为 3")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 偶数组: [1 4 7 9] 对应的中位数为 ( 4 + 7 ) / 2 = 5.5")]),s._v("\n\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取 nums1 的长度")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" n "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" nums1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取 nums2 的长度")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" m "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" nums2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" n "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" m"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 通过这个方法，可以将 nums1 和 nums2 进行一个交换操作，确保 nums1 的长度一定小于 nums2")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("findMedianSortedArrays")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nums2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("nums1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// nums1、nums2 均为有序数组")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果将有序数组切割分成两部分，那么切的那个位置的左侧为左边最大值，切的那个位置的右侧为右边最小值")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//      |")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// [1 4 | 7 9] ")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//      |")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 比如 4 就是左部分的最大值，7 就是右部分的最小值")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 设置两个变量 Cut1、Cut2 方便切割 nums1、nums2")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 不断的挪动 Cut1 和 Cut2 切的位置，如果说 Cut1、Cut2 找到了合适的位置进行切割")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1、 ( nums1 的左部分 + nums2 的左部分 ）个数 = （ nums1 的右部分 + nums2 的右部分 ）个数】")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2、( nums1 的左部分 + nums2 的左部分 ）最大数 <= （ nums1 的右部分 + nums2 的右部分 ）最小数")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 那么也就找到了中位数")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 一开始 Cut1 为 0")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cut1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 一开始 Cut2 为 0")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cut2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// nums1、nums2 均为有序数组")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 显然，LMax1 <= RMin1，LMax2 <= RMin2")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// LMax1 表示 nums1 被 Cut1 切割后，左部分的最大值")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LMax1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// LMax2 表示 nums2 被 Cut2 切割后，左部分的最大值")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LMax2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// RMin1 表示 nums1 被 Cut1 切割后，右部分的最小值")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RMin1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// RMin2 表示 nums2 被 Cut2 切割后，右部分的最小值")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RMin2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 一开始 Cut1 = 0，Cut2 = 0 ，也就是说 nums1 的左部分 0 个元素， nums2 的左部分 0 个元素")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 因此需要挪动 Cut1、Cut2 的位置，使得 ( nums1 的左部分 + nums2 的左部分 ）个数 = （ nums1 的右部分 + nums2 的右部分 ）个数")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 所以，一开始直接把 Cut1 挪到 nums1 的中间位置进行切割，把 Cut2 挪到 nums2 的中间位置进行切割")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果 LMax1 <= RMin2，LMax2 <= RMin1")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 又由于 LMax1 <= RMin1，LMax2 <= RMin2")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 意味着")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1、( nums1 的左部分 + nums2 的左部分 ）个数 = （ nums1 的右部分 + nums2 的右部分 ）个数")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2、( nums1 的左部分 + nums2 的左部分 ）最大数 <= （ nums1 的右部分 + nums2 的右部分 ）最小数")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当发现 LMax1 > RMin2 时，说明 Cut1 切的位置不对，左边的元素太多了，需要把一些元素挪到右边来，这样才能减小 LMax1 的值")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 所以  Cut1 的值减小了")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 而因为 ( nums1 的左部分 + nums2 的左部分 ）个数 = Cut1 + Cut2")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Cut2 变大了，也就是说可以通过 Cut1 的位置找到 Cut2 的位置")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 由于 m + n 可能为奇数, 也可能为偶数，为了方便统一处理，这里加入一个技巧")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在数组的 开头、结尾、数字直接加入一个 “#”")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这样 nums2 的长度 m 变成了 2m + 1")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这样 nums1 的长度 n 变成了 2n + 1")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 两数之和变成了 2m + 2n + 2，恒为偶数")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 比如 [ 1 、3 、5 、7 ] 变成了 [ #、 1 、# 、3 、 # 、5  、 # 、7 、# ]")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 比如 [ 2 、4 、6 ] 变成了 [ #、 2 、# 、4 、 # 、6  、 #  ]")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 因此，每个位置的下标位置发生了改变，但可以通过 /2 得到原来元素的位置：")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 比如 1，原来在 0 位，现在是 1 位，1 / 2 = 0")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 比如 3，原来在 1 位，现在是 3 位，3 / 2 = 1")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 比如 6，原来在 2 位，现在是 5 位，5 / 2 = 2")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 此时，LMax1 = ( Cut1 - 1 ) / 2 位置上的元素")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// RMin1 = Cut1 / 2 位置上的元素")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 接下来，开始找 Cut1 和 Cut2 的位置了")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// left 为 nums1 最左侧的元素，可以获取到")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" left "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 添加了 “#” 后，nums1 的长度 n 变成了 2n + 1")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// right 为 nums1 最右侧的元素，可以获取到")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" right "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" n "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在 while 循环里面，left 不断的 ++，而 right 不断的 --")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当 [ left , right ] 这个区间不存在元素的时候，才跳出 while 循环，也就是当 left > right 时跳出循环")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 即当 left = right + 1 时，搜索区间没有元素了")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 由于 left 和 right 相遇的时候指向同一个元素，这个元素是存在于 [ left , right] 区间，这个区间就一个元素")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 所以此时 while 循环的判断可以使用等号")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" left "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" right"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            \n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Cut1 切在 nums1 的中间位置")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cut1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" left "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" right "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" left "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ( nums1 的左部分 + nums2 的左部分 ）个数 = m + n")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 所以 Cut2 = m + n - Cut1")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cut2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" m "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" n "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cut1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 注意几种边界情况")]),s._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1、nums1 左部分没有元素，全部都在右部分，并且元素值都比中值大")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 所以，中值在 nums2 中，这里就可以假定 LMax1 = INT_MIN")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cut1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LMax1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("MIN_VALUE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 否则 LMax1 切割位置的左边元素")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LMax1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" nums1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cut1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2、nums1 右部分没有元素，全部都在左部分，并且元素值都比中值小")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 所以，中值在 nums2 中，这里就可以假定 RMin1 = MAX_VALUE")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cut1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RMin1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("MAX_VALUE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 否则 RMin1 切割位置的右边元素")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RMin1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" nums1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cut1")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3、nums2 左部分没有元素，全部都在右部分，并且元素值都比中值大")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 所以，中值在 nums1 中，这里就可以假定 LMax2 = INT_MIN")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cut2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LMax2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("MIN_VALUE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 否则 LMax2 切割位置的左边元素")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LMax2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" nums2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cut2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2、nums2 右部分没有元素，全部都在左部分，并且元素值都比中值小")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 所以，中值在 nums1 中，这里就可以假定 RMin2 = MAX_VALUE")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cut2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" m"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RMin2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("MAX_VALUE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 否则 RMin2 切割位置的右边元素")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RMin2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" nums2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cut2")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// LMax1 > RMin2")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 说明 Cut1 切的位置不对，左边的元素太多了，需要把一些元素挪到右边来，这样才能减小 LMax1 ")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Cut1 切的位置向左边挪一些")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LMax1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RMin2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 也就是说缩小之后的区间最右侧位置为 Cut1 - 1")]),s._v("\n                right "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cut1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            \n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// LMax2 > RMin1")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 说明 Cut1 切的位置不对，左边的元素太少了，需要把一些元素挪到左边来，这样才能增大 RMin1  ")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Cut1 切的位置向右边挪一些")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LMax2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RMin1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 也就是说缩小之后的区间最左侧位置为 Cut1 + 1")]),s._v("\n                left "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cut1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 否则就是说明切的位置合适，不用再找其它位置了")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1、( nums1 的左部分 + nums2 的左部分 ）个数 = （ nums1 的右部分 + nums2 的右部分 ）个数")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2、( nums1 的左部分 + nums2 的左部分 ）最大数 <= （ nums1 的右部分 + nums2 的右部分 ）最小数")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 那么再获取 LMax1 和 LMax2 较大值 + RMin1 和 RMin2 的较小值")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 两者相加除以 2 就是结果")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Math")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("max")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LMax1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LMax2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Math")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("min")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RMin1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RMin2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),n("h3",{attrs:{id:"_2、-c-代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、-c-代码"}},[s._v("#")]),s._v(" **2、**"),n("strong",[s._v("C++")]),s._v(" "),n("strong",[s._v("代码")])]),s._v(" "),n("h3",{attrs:{id:"_3、python-代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、python-代码"}},[s._v("#")]),s._v(" "),n("strong",[s._v("3、Python 代码")])]),s._v(" "),n("div",{staticClass:"language-Python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[s._v("登录 AlgoMooc 官网获取更多算法图解\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# https://www.algomooc.com")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 作者：程序员吴师兄")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 代码有看不懂的地方一定要私聊咨询吴师兄呀")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 寻找两个正序数组的中位数(4):https://leetcode-cn.com/problems/median-of-two-sorted-arrays/submissions/")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("findMedianSortedArrays")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" nums1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" List"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" nums2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" List"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("float")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 中位数的概念：将一个集合划分为两个长度相等的子集，其中一个子集中的元素总是大于另一个子集中的元素")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 由于数组的长度有两种情况：奇数、偶数")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 奇数组: [2 3 5] 对应的中位数为 3")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 偶数组: [1 4 7 9] 对应的中位数为 ( 4 + 7 ) / 2 = 5.5")]),s._v("\n\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取 nums1 的长度")]),s._v("\n        n "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("len")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nums1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取 nums2 的长度")]),s._v("\n        m "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("len")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nums2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" n "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" m "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 通过这个方法，可以将 nums1 和 nums2 进行一个交换操作，确保 nums1 的长度一定小于 nums2")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("findMedianSortedArrays"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nums2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("nums1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    \n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# nums1、nums2 均为有序数组")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果将有序数组切割分成两部分，那么切的那个位置的左侧为左边最大值，切的那个位置的右侧为右边最小值")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#      |")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# [1 4 | 7 9] ")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#      |")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 比如 4 就是左部分的最大值，7 就是右部分的最小值")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置两个变量 Cut1、Cut2 方便切割 nums1、nums2")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 不断的挪动 Cut1 和 Cut2 切的位置，如果说 Cut1、Cut2 找到了合适的位置进行切割")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1、 ( nums1 的左部分 + nums2 的左部分 ）个数 = （ nums1 的右部分 + nums2 的右部分 ）个数】")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2、( nums1 的左部分 + nums2 的左部分 ）最大数 <= （ nums1 的右部分 + nums2 的右部分 ）最小数")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 那么也就找到了中位数")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 一开始 Cut1 为 0")]),s._v("\n        Cut1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 一开始 Cut2 为 0")]),s._v("\n        Cut2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# nums1、nums2 均为有序数组")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显然，LMax1 <= RMin1，LMax2 <= RMin2")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# LMax1 表示 nums1 被 Cut1 切割后，左部分的最大值")]),s._v("\n        LMax1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# LMax2 表示 nums2 被 Cut2 切割后，左部分的最大值")]),s._v("\n        LMax2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# RMin1 表示 nums1 被 Cut1 切割后，右部分的最小值")]),s._v("\n        RMin1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# RMin2 表示 nums2 被 Cut2 切割后，右部分的最小值")]),s._v("\n        RMin2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 一开始 Cut1 = 0，Cut2 = 0 ，也就是说 nums1 的左部分 0 个元素， nums2 的左部分 0 个元素")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 因此需要挪动 Cut1、Cut2 的位置，使得 ( nums1 的左部分 + nums2 的左部分 ）个数 = （ nums1 的右部分 + nums2 的右部分 ）个数")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 所以，一开始直接把 Cut1 挪到 nums1 的中间位置进行切割，把 Cut2 挪到 nums2 的中间位置进行切割")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果 LMax1 <= RMin2，LMax2 <= RMin1")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 又由于 LMax1 <= RMin1，LMax2 <= RMin2")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 意味着")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1、( nums1 的左部分 + nums2 的左部分 ）个数 = （ nums1 的右部分 + nums2 的右部分 ）个数")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2、( nums1 的左部分 + nums2 的左部分 ）最大数 <= （ nums1 的右部分 + nums2 的右部分 ）最小数")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当发现 LMax1 > RMin2 时，说明 Cut1 切的位置不对，左边的元素太多了，需要把一些元素挪到右边来，这样才能减小 LMax1 的值")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 所以  Cut1 的值减小了")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 而因为 ( nums1 的左部分 + nums2 的左部分 ）个数 = Cut1 + Cut2")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Cut2 变大了，也就是说可以通过 Cut1 的位置找到 Cut2 的位置")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 由于 m + n 可能为奇数, 也可能为偶数，为了方便统一处理，这里加入一个技巧")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在数组的 开头、结尾、数字直接加入一个 “#”")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这样 nums2 的长度 m 变成了 2m + 1")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这样 nums1 的长度 n 变成了 2n + 1")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 两数之和变成了 2m + 2n + 2，恒为偶数")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 比如 [ 1 、3 、5 、7 ] 变成了 [ #、 1 、# 、3 、 # 、5  、 # 、7 、# ]")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 比如 [ 2 、4 、6 ] 变成了 [ #、 2 、# 、4 、 # 、6  、 #  ]")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 因此，每个位置的下标位置发生了改变，但可以通过 /2 得到原来元素的位置：")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 比如 1，原来在 0 位，现在是 1 位，1 / 2 = 0")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 比如 3，原来在 1 位，现在是 3 位，3 / 2 = 1")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 比如 6，原来在 2 位，现在是 5 位，5 / 2 = 2")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 此时，LMax1 = ( Cut1 - 1 ) / 2 位置上的元素")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# RMin1 = Cut1 / 2 位置上的元素")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 接下来，开始找 Cut1 和 Cut2 的位置了")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# left 为 nums1 最左侧的元素，可以获取到")]),s._v("\n        left "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加了 “#” 后，nums1 的长度 n 变成了 2n + 1")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# right 为 nums1 最右侧的元素，可以获取到")]),s._v("\n        right "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" n  \n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在 while 循环里面，left 不断的 ++，而 right 不断的 --")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当 [ left , right ] 这个区间不存在元素的时候，才跳出 while 循环，也就是当 left > right 时跳出循环")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 即当 left = right + 1 时，搜索区间没有元素了")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 由于 left 和 right 相遇的时候指向同一个元素，这个元素是存在于 [ left , right] 区间，这个区间就一个元素")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 所以此时 while 循环的判断可以使用等号")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" left "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" right "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Cut1 切在 nums1 的中间位置")]),s._v("\n            Cut1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" left "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" right "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" left "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ( nums1 的左部分 + nums2 的左部分 ）个数 = m + n")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 所以 Cut2 = m + n - Cut1")]),s._v("\n            Cut2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" m "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" n "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" Cut1\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 注意几种边界情况")]),s._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1、nums1 左部分没有元素，全部都在右部分，并且元素值都比中值大")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 所以，中值在 nums2 中，这里就可以假定 LMax1 = INT_MIN")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" Cut1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                LMax1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000001")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 否则 LMax1 切割位置的左边元素")]),s._v("\n                LMax1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" nums1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Cut1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n        \n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2、nums1 右部分没有元素，全部都在左部分，并且元素值都比中值小")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 所以，中值在 nums2 中，这里就可以假定 RMin1 = MAX_VALUE")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" Cut1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" n "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                RMin1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000001")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 否则 RMin1 切割位置的右边元素")]),s._v("\n                RMin1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" nums1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" Cut1  "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" \n        \n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 3、nums2 左部分没有元素，全部都在右部分，并且元素值都比中值大")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 所以，中值在 nums1 中，这里就可以假定 LMax2 = INT_MIN")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" Cut2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                LMax2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000001")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 否则 LMax2 切割位置的左边元素")]),s._v("\n                LMax2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" nums2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Cut2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n        \n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2、nums2 右部分没有元素，全部都在左部分，并且元素值都比中值小")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 所以，中值在 nums1 中，这里就可以假定 RMin2 = MAX_VALUE")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" Cut2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" m "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                RMin2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000001")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" \n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 否则 RMin2 切割位置的右边元素")]),s._v("\n                RMin2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" nums2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" Cut2  "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n            \n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# LMax1 > RMin2")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 说明 Cut1 切的位置不对，左边的元素太多了，需要把一些元素挪到右边来，这样才能减小 LMax1 ")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Cut1 切的位置向左边挪一些")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v("  LMax1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" RMin2 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 也就是说缩小之后的区间最右侧位置为 Cut1 - 1")]),s._v("\n                right "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Cut1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# LMax2 > RMin1")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 说明 Cut1 切的位置不对，左边的元素太少了，需要把一些元素挪到左边来，这样才能增大 RMin1  ")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Cut1 切的位置向右边挪一些")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("elif")]),s._v("  LMax2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" RMin1 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 也就是说缩小之后的区间最左侧位置为 Cut1 + 1")]),s._v("\n                left "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Cut1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 否则就是说明切的位置合适，不用再找其它位置了")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1、( nums1 的左部分 + nums2 的左部分 ）个数 = （ nums1 的右部分 + nums2 的右部分 ）个数")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2、( nums1 的左部分 + nums2 的左部分 ）最大数 <= （ nums1 的右部分 + nums2 的右部分 ）最小数")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),s._v("\n            \n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 那么再获取 LMax1 和 LMax2 较大值 + RMin1 和 RMin2 的较小值")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 两者相加除以 2 就是结果")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("max")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("LMax1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("LMax2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("min")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("RMin1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("RMin2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.0")]),s._v("\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);