(window.webpackJsonp=window.webpackJsonp||[]).push([[252],{638:function(t,s,a){"use strict";a.r(s);var n=a(54),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"剑指-offer-54-二叉搜索树的第k大节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#剑指-offer-54-二叉搜索树的第k大节点"}},[t._v("#")]),t._v(" 剑指 Offer 54. 二叉搜索树的第k大节点")]),t._v(" "),a("p",[t._v("大家好，我是吴师兄。")]),t._v(" "),a("p",[t._v("今天继续来学习《剑指Offer》系列的一道经典题目，依旧给出了非常详细的题解和精美的配图与动画。")]),t._v(" "),a("h2",{attrs:{id:"一、题目描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、题目描述"}},[t._v("#")]),t._v(" 一、题目描述")]),t._v(" "),a("p",[t._v("给定一棵二叉搜索树，请找出其中第 k 大的节点。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://article-1257126549.cos.ap-guangzhou.myqcloud.com/blog/4e00x.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("限制：")])]),t._v(" "),a("ul",[a("li",[t._v("1 ≤ k ≤ 二叉搜索树元素个数")])]),t._v(" "),a("h2",{attrs:{id:"二、题目解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、题目解析"}},[t._v("#")]),t._v(" 二、题目解析")]),t._v(" "),a("p",[t._v("这道题目首先得掌握以下基础概念：")]),t._v(" "),a("ul",[a("li",[t._v("1、二叉搜索树")]),t._v(" "),a("li",[t._v("2、中序遍历的递归写法")])]),t._v(" "),a("p",[t._v("二叉搜索树是一棵"),a("strong",[t._v("有序")]),t._v("的二叉树，它具有如下的性质：")]),t._v(" "),a("ul",[a("li",[t._v("1、若它的左子树不为空，那么左子树上的所有值均小于它的根节点")]),t._v(" "),a("li",[t._v("2、若它的右子树不为空，那么右子树上所有值均大于它的根节点")]),t._v(" "),a("li",[t._v("3、它的左子树和右子树也都是二叉搜索树")])]),t._v(" "),a("p",[t._v("而中序遍历的递归过程是 "),a("strong",[t._v("左 ---》根 ---》右")]),t._v(" 的顺序。")]),t._v(" "),a("p",[t._v("所以，如果对二叉搜索树采取中序遍历的方式，那么得到的序列是一个从小到大排列的递增序列，而如果采取"),a("strong",[t._v("中序遍历的倒序方式")]),t._v("，那么得到的就是一个"),a("strong",[t._v("从大到小的递减序列")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://article-1257126549.cos.ap-guangzhou.myqcloud.com/blog/noazi.png",alt:""}})]),t._v(" "),a("p",[t._v("因此，求二叉搜索树的第 k 大节点就可以转换为"),a("strong",[t._v("二叉搜索树的中序遍历的倒序方式的第 k 个节点")]),t._v("。")]),t._v(" "),a("p",[t._v("具体操作如下：")]),t._v(" "),a("p",[t._v("1、设置两个全局变量，"),a("code",[t._v("res")]),t._v(" 用来存储最后的那个节点的值，"),a("code",[t._v("count")]),t._v(" 用来统计记录了第几大的节点，一开始为第零大。")]),t._v(" "),a("p",[t._v("2、接下来对二叉搜索树采取中序遍历的倒序方式，即按照 "),a("strong",[t._v("右 ---》根 —》左")]),t._v(" 的递归顺序。")]),t._v(" "),a("p",[t._v("3、在递归的过程中，如果发现 "),a("code",[t._v("count == k")]),t._v("，说明已经找到了目标节点，返回结果就行")]),t._v(" "),a("p",[t._v("4、否则需要不断的执行 "),a("code",[t._v("count++")]),t._v(" 操作，直到 "),a("code",[t._v("count == k")]),t._v(" 位置，这样当前这个节点的值就是结果，赋值给 "),a("code",[t._v("res")]),t._v(" 返回就行")]),t._v(" "),a("p",[t._v("为了帮助你更好的理解整个过程，我特意做了一组动画，"),a("strong",[t._v("点开可以查看")]),t._v("：")]),t._v(" "),a("video",{attrs:{id:"video",width:"700",height:"400",muted:"muted",controls:"controls",poster:"https://article-1257126549.cos.ap-guangzhou.myqcloud.com/blog/3hdi5.jpeg"},domProps:{muted:!0}},[a("source",{attrs:{src:"https://article-1257126549.cos.ap-guangzhou.myqcloud.com/MP4/%E5%89%91%E6%8C%87%20Offer%2054.%20%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E7%AC%ACk%E5%A4%A7%E8%8A%82%E7%82%B9.m4v",type:"video/mp4"}})]),t._v(" "),a("h2",{attrs:{id:"三、参考代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、参考代码"}},[t._v("#")]),t._v(" 三、参考代码")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 登录 AlgoMooc 官网获取更多算法图解")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// https://www.algomooc.com")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 作者：程序员吴师兄")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码有看不懂的地方一定要私聊咨询吴师兄呀")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 剑指 Offer 54. 二叉搜索树的第k大节点：https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置全局变量 res，用来存储结果")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置全局变量 count，用来表示记录了第几大的节点，默认是第零大")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("kthLargest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),t._v(" root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 二叉搜索树中序遍历的倒序操作，最终会生成一个递减的有序序列")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("helper")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回第 k 大的节点值")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("helper")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),t._v(" cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 访问到空节点就无需再遍历了")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 中序遍历的倒序操作从节点的右子节点开始")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("helper")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果此时全局变量 count 已经等于 k ，说明已经获取到第 k 大的节点，无需再访问当前节点（根）的值，也无需继续遍历下去")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" k "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 否则更新全局变量 count 的值，并继续遍历下去")]),t._v("\n        count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果此时全局变量 count 已经等于 k ，说明已经获取到第 k 大的节点，无需再遍历下去，直接获取当前节点的值，赋值给 res")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" k "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最后再访问当前节点的左子节点")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("helper")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);